if not exists (select object_id from sys.objects where type = 'P' and name = 'spInsertUpdateEvent')
  exec ('create procedure dbo.spInsertUpdateEvent as select 1 as temp')
go

--Mandatory Fields for a new Event (Course)
-- @PA_COURSE_PRODUCT_ID	=	The Product the course links to
-- @PA_COURSE_ORG_ID 		@PA_COURSE_DIARY_TYPE <> 'Work Package'
-- @PA_COURSE_STATUS		@PA_COURSE_DIARY_TYPE <> 'Work Package'
-- @PA_COURSE_START_DATE
-- @PA_COURSE_END_DATE

-- You also need to make sure the Product has a default price


--exec dbo.spInsertUpdateCourse null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null

ALTER procedure [dbo].[spInsertUpdateEvent]
(
@PA_USER_LOGIN_ID varchar(3),
@PA_ERRORCODE int = null OUTPUT,
@PA_ERRORDESC varchar(1000) = null OUTPUT,
@PA_RETURN_ID varchar(11) = null OUTPUT,
@PA_COURSE_ID varchar(11) = null,
@PA_COURSE_PERSON_ID varchar(11) = null,
@PA_COURSE_PRODUCT_ID varchar(11) = null,
@PA_COURSE_LOC_ID varchar(11) = null,
@PA_COURSE_ORG_ID varchar(11) = null,
@PA_COURSE_REF varchar(40) = null,
@PA_COURSE_NAME nvarchar(250) = null,
@PA_COURSE_TYPE varchar(40) = null,
@PA_COURSE_SECTOR varchar(20) = null,
@PA_COURSE_ON_SITE tinyint = null,
@PA_COURSE_BLOCK_PRICD tinyint = null,
@PA_COURSE_START_DATE datetime = null,
@PA_COURSE_END_DATE datetime = null,
@PA_COURSE_START_TIME datetime = null,
@PA_COURSE_END_TIME datetime = null,
@PA_COURSE_STATUS varchar(40) = null,
@PA_COURSE_DIARY_TYPE varchar(12) = null,
@PA_COURSE_LENGTH float = null,
@PA_COURSE_MIN_PLACES float = null,
@PA_COURSE_MAX_PLACES float = null,
@PA_COURSE_FREE_PLACES float = null,
@PA_COURSE_CONF_PLACES float = null,
@PA_COURSE_PROVIS_BKGS float = null,
@PA_COURSE_RESV_PLACES float = null,
@PA_COURSE_WAITING float = null,
@PA_COURSE_CANCELS float = null,
@PA_COURSE_BLOCK_THRES float = null,
@PA_COURSE_BLOCK_PRICE float = null,
@PA_COURSE_STUDT_PRICE float = null,
@PA_COURSE_EST_PUR_PRC float = null,
@PA_COURSE_NO_HOURS float = null,
@PA_COURSE_VAT_CODE varchar(25) = null,
@PA_COURSE_COST_CODE varchar(40) = null,
@PA_COURSE_REV_CODE varchar(40) = null,
@PA_COURSE_JN_INF_ORDE varchar(11) = null,
@PA_COURSE_TUC_REGION varchar(25) = null,
@PA_COURSE_BUDGET float = null,
@PA_COURSE_ACTUAL float = null,
@PA_COURSE_PAY_FAG tinyint = null,
@PA_COURSE_PAY_DATE datetime = null,
@PA_COURSE_PAY_CHEQ_NO varchar(10) = null,
@PA_COURSE_COLL_INV_NO varchar(12) = null,
@PA_COURSE_INCL_OUTLIN tinyint = null,
@PA_COURSE_INCL_MAP tinyint = null,
@PA_COURSE_INC_SPC_INS tinyint = null,
@PA_COURSE_INCL_BK_FRM tinyint = null,
@PA_COURSE_INC_PST_QST tinyint = null,
@PA_COURSE_INC_PRE_SRV tinyint = null,
@PA_COURSE_BUD_PERIOD varchar(11) = null,
@PA_COURSE_BUD_FORECST float = null,
@PA_COURSE_SOURCE_CODE varchar(15) = null,
@PA_COURSE_PERSON_ID_2 varchar(11) = null,
@PA_COURSE_CLASS varchar(10) = null,
@PA_COURSE_HOST_NAME varchar(17) = null,
@PA_COURSE_VENU_ACTUAL float = null,
@PA_COURSE_VENU_BUDGET float = null,
@PA_COURSE_CATER_ACTUL float = null,
@PA_COURSE_CATER_BDGET float = null,
@PA_COURSE_HOTEL_ACTUL float = null,
@PA_COURSE_HOTEL_BDGET float = null,
@PA_COURSE_EQUIP_ACTUL float = null,
@PA_COURSE_EQUIP_BDGET float = null,
@PA_COURSE_TRAV_ACTUAL float = null,
@PA_COURSE_TRAV_BUDGET float = null,
@PA_COURSE_EXP_ACTUAL float = null,
@PA_COURSE_EXP_BUDGET float = null,
@PA_COURSE_OTHR_ACTUAL float = null,
@PA_COURSE_OTHR_BUDGET float = null,
@PA_COURSE_QUEST_LETT varchar(11) = null,
@PA_COURSE_SURV_LETT varchar(11) = null,
@PA_COURSE_BOOK_ACTUAL float = null,
@PA_COURSE_ACTUAL_TOT float = null,
@PA_COURSE_INCL_JOIN tinyint = null,
@PA_COURSE_INC_CONFIRM tinyint = null,
@PA_COURSE_JOIN_LETT varchar(11) = null,
@PA_COURSE_CONFRM_LETT varchar(11) = null,
@PA_COURSE_PROV_LETT varchar(11) = null,
@PA_COURSE_INV_LETT varchar(11) = null,
@PA_COURSE_DO_NOT_INVC tinyint = null,
@PA_COURSE_CANCEL_DATE datetime = null,
@PA_COURSE_CANCEL_BY varchar(35) = null,
@PA_COURSE_INC_CSH_INV tinyint = null,
@PA_COURSE_INC_PRO_FRM tinyint = null,
@PA_COURSE_INC_RECEIPT tinyint = null,
@PA_COURSE_CMC tinyint = null,
@PA_COURSE_PL_ID varchar(11) = null,
@PA_COURSE_SUPPLIER_ID varchar(11) = null,
@PA_COURSE_BREAK_EVEN float = null,
@PA_COURSE_CHANGE_HIST varchar(255) = null,
@PA_COURSE_BIP tinyint = null,
@PA_COURSE_QUEST_ID varchar(11) = null,
@PA_COURSE_POST_ID varchar(11) = null,
@PA_COURSE_ORDER_NO varchar(20) = null,
@PA_COURSE_PROV_PACK varchar(11) = null,
@PA_COURSE_CONF_PACK varchar(11) = null,
@PA_COURSE_JOINING_PACK varchar(11) = null,
@PA_COURSE_POST_PACK varchar(11) = null,
@PA_COURSE_PROV_INV tinyint = null,
@PA_COURSE_CONF_INV tinyint = null,
@PA_COURSE_JOIN_INV tinyint = null,
@PA_COURSE_POST_INV tinyint = null,
@PA_COURSE_PERIOD varchar(8) = null,
@PA_COURSE_SEARCH_NAME varchar(80) = null,
@PA_COURSE_EVR_ID varchar(11) = null,
@PA_COURSE_OPP_ID varchar(11) = null,
@PA_COURSE_SESS_COUNT int = null,
@PA_COURSE_PRIVATE tinyint = null,
@PA_COURSE_PLAN_ID varchar(11) = null,
@PA_COURSE_PLAN_NAME varchar(80) = null,
@PA_COURSE_WEB tinyint = null,
@PA_COURSE_GRADES varchar(5) = null,
@PA_COURSE_DESC_TXT_ID varchar(11) = null,
@PA_COURSE_TARG_TXT_ID varchar(11) = null,
@PA_COURSE_SETUP_TIME datetime = null,
@PA_COURSE_DATE_DEC datetime = null,
@PA_COURSE_NUM_INVITE int = null,
@PA_COURSE_PERSON_ID_3 varchar(11) = null,
@PA_COURSE_PERSON_ID_4 varchar(11) = null,
@PA_COURSE_BU_ID varchar(11) = null,
@PA_COURSE_USERNUM_1 decimal(16,2) = null,
@PA_COURSE_USERNUM_2 decimal(16,2) = null,
@PA_COURSE_URL varchar(80) = null,
@PA_COURSE_PROJ_ID varchar(11) = null,
@PA_COURSE_CODE varchar(11) = null,
@PA_COURSE_BT_ID varchar(11) = null,
@PA_COURSE_COMMENTS varchar(255) = null,
@PA_COURSE_3RD_PARTY tinyint = null,
@PA_COURSE_U_DATE_1 datetime = null,
@PA_COURSE_U_DATE_2 datetime = null,
@PA_COURSE_U_DATE_3 datetime = null,
@PA_COURSE_U_DATE_4 datetime = null,
@PA_COURSE_USERNUM_3 decimal(16,2) = null,
@PA_COURSE_ADD_ID varchar(11) = null,
@PA_COURSE_NAME2 varchar(250) = null,
@PA_COURSE_USERCHAR_1 varchar(100) = null,
@PA_COURSE_USERCHAR_2 varchar(100) = null,
@PA_COURSE_USERCHAR_3 varchar(100) = null,
@PA_COURSE_USERCHAR_4 varchar(100) = null,
@PA_COURSE_SUP_ROLE_ID varchar(11) = null,
@PA_COURSE_CURRENCY varchar(3) = null,
@PA_COURSE_PRICE_A float = null,
@PA_COURSE_PRICE_B float = null,
@PA_COURSE_PRICE_C float = null,
@PA_COURSE_PRICE_D float = null,
@PA_COURSE_PRICE_E float = null,
@PA_COURSE_SELCO_SP_ID varchar(11) = null,
@PA_COURSE_USERNUM_4 decimal(16,2) = null,
@PA_COURSE_USERNUM_5 decimal(16,2) = null,
@PA_COURSE_USERNUM_6 decimal(16,2) = null,
@PA_COURSE_USERNUM_7 tinyint = null,
@PA_COURSE_CHARGABLE tinyint = null,
@PA_COURSE_INVOICED tinyint = null,
@PA_COURSE_BKT_ID varchar(11) = null,
@PA_COURSE_CONTPROL_ID varchar(11) = null,
@PA_COURSE_BUD_REV float = null,
@PA_COURSE_BUD_FORCAST float = null,
@PA_COURSE_U_DATE_5 datetime = null,
@PA_COURSE_U_DATE_6 datetime = null,
@PA_COURSE_USERCHAR_5 varchar(100) = null,
@PA_COURSE_USERCHAR_6 varchar(100) = null,
@PA_COURSE_U_TINT_1 tinyint = null,
@PA_COURSE_U_TINT_2 tinyint = null,
@PA_COURSE_U_TINT_3 tinyint = null,
@PA_COURSE_U_TINT_4 tinyint = null,
@PA_COURSE_U_TINT_5 tinyint = null,
@PA_COURSE_U_TINT_6 tinyint = null,
@PA_COURSE_SY_TYPE int = null,
@PA_COURSE_PREJOIN_PACK varchar(11) = null,
@PA_COURSE_PSTJOIN_PACK varchar(11) = null,
@PA_COURSE_BOOK_ACT_BC2 decimal(19,2) = null,
@PA_COURSE_ACT_TOT_BC2 decimal(19,2) = null,
@PA_COURSE_PROV_SENT_DTE datetime = null,
@PA_COURSE_CONF_SENT_DTE datetime = null,
@PA_COURSE_JOIN_SENT_DTE datetime = null,
@PA_COURSE_PP_SENT_DTE datetime = null,
@PA_COURSE_PRJOIN_SENT_DTE datetime = null,
@PA_COURSE_POJOIN_SENT_DTE datetime = null,
@PA_COURSE_CUT_PRD int = null,
@PA_COURSE_PROV_ORG_ID varchar(11) = null,
@PA_COURSE_ALLOC_STATUS tinyint = null,
@PA_COURSE_EST_HOURS float = null,
@PA_COUSE_FLOAT tinyint = null,
@PA_COURSE_QUAL_DEL tinyint = null,
@PA_COURSE_COH_ONLY tinyint = null,
@PA_LIST_ID varchar(11) = null,
@PA_EV_REQUEST varchar(11) = null,
@PA_COURSE_ANALYSIS_1 varchar(20) = null,
@PA_COURSE_ANALYSIS_2 varchar(20) = null,
@PA_COURSE_PROV_PROLE_ID varchar(11) = null,
@PA_COURSE_SUP_STATUS varchar(50) = null,
@PA_COURSE_CODE_LOOKUP1 varchar(50) = null,
@PA_COURSE_FUNDED_ORG_ID varchar(11) = null,
@PA_COURSE_OVERBOOK tinyint = null,
@PA_COURSE_NOTES varchar(11) = null,
@PA_COURSE_INT_NOTES varchar(11) = null,
@PA_NOT_SESSIONS tinyint = 0,
@PA_COURSE_FUNDED tinyint = 0,
@PA_COURSE_DEF_ELEM_ST varchar(20) = null,
@PA_COURSE_BD_COMP_BY varchar(11) = null,
@PA_COURSE_BD_COMP_DATE datetime = null,
@PA_COURSE_BD_TOT_ACT_COST decimal(19,2) = null,
@PA_COURSE_BD_STATUS varchar(40) = null,
@PA_COURSE_BD_PREP_BY varchar(11) = null,
@PA_COURSE_BD_PREP_DATE datetime = null,
@PA_COURSE_BD_APP_BY varchar(11) = null,
@PA_COURSE_BD_APP_DATE datetime = null,
@PA_COURSE_BD_TOT_EST_COST decimal(19,2) = null,
@PA_COURSE_CALC_COMMISSION tinyint = null,
@PA_COURSE_BAT_ID varchar(11) = null,
@PA_COURSE_CANCEL_PACK varchar(11) = null,
@PA_COURSE_CANP_SENT_DTE datetime = null,
@PA_COURSE_CANCELLATION_DATE datetime = null,
@PA_COURSE_REASON varchar(40) = null,
@PA_COURSE_UNRECOVERABLE_CANC_LOSS decimal(19,2) = null,      
@PA_COURSE_DEFAULT_TRAINEE_DAYS decimal(19,1) = null,
@PA_COURSE_GRANT_ELIGABLE tinyint = null,
@PA_COURSE_GRANT_VALUE_AVAILABLE decimal(19,2) = null, 
@PA_COURSE_BREAKEVEN_VALUE1 decimal(19,2) = null,   
@PA_COURSE_BREAKEVEN_VALUE2 decimal(19,2) = null,
@PA_COURSE_EXT_COURSEWARE tinyint = null,
@PA_COURSE_CONTINGENCY integer = null,
@PA_COURSE_COST decimal(19,2) = null,
@PA_COURSE_DELIVERY_DAYS integer = null,
@PA_COURSE_MTR_PROLE_ID varchar(11) = null,
@PA_COURSE_MA_PROLE_ID varchar(11) = null,
@PA_COURSE_ACADY_CODE nvarchar(40) = null,
@PA_COURSE_CLONE tinyint = null,
@PA_COURSE_NO_AUTO_UPDATE tinyint = null,
@PA_COURSE_OUT_OF_HOURS tinyint = null,
@PA_COURSE_STOP_TRAIN_COMPLETION tinyint = null,
@PA_COURSE_USERMULTI_1 varchar(2040) = null,
@PA_COURSE_BD_ORIG_COST money = null,
@PA_COURSE_PSH_ID int = null,
@PA_COURSE_BLOCK_TYPE tinyint = null,
@PA_COURSE_PACK_SEND_PROLE_ID varchar(11) = null,
@PA_COURSE_PACK_BCC_EMAIL varchar(240) = null,
@PA_COURSE_PACK_MDN_EMAIL varchar(240) = null,
@PA_COURSE_PACK_DSN_EMAIL varchar(240) = null,
@PA_COURSE_PACK_DSN_OPTIONS varchar(10) = null,
@PA_COURSE_CODE_IMAGE varchar(40) = null,
@PA_COURSE_CLIENT_REF varchar(50) = null,
@PA_COURSE_FIRST_LIC_EVENT	tinyint = null,
@PA_COURSE_TRNP_ID	varchar(11) = null,
@PA_ADMIN_PROLE_ID	varchar(11) = null,
@PA_COURSE_LICENSED	tinyint = null,
@PA_COURSE_RESULT_REC_DATE datetime = null,
@PA_COURSE_PAPERS_REC_DATE datetime = null,
@PA_COURSE_DELIV_METHD varchar(40) = null,
@PA_COURSE_ITEMS_RECEIVED_DATE datetime = null,
@PA_MAIN_BOM_START_TIME datetime = null,
@PA_MAIN_BOM_END_TIME datetime = null,
@PA_ROOM_PROD_ID varchar(11) = null,
@PA_TRAIN_PROLE_ID varchar(11) = null,
@PA_COURSE_SESSIONS_DESCRIPTION nvarchar(max) = null,
@PA_COURSE_SESSIONS_HEADER nvarchar(500) = null,
@PA_COURSE_CUT_PRD_TIME tinyint = null
)
as

declare
@SP_DB_ID varchar(3),
@PA_USER_LOGIN_ID2 varchar(11),
@ERRORCODE int, -- Local @@ERROR,
@ERRORDESC varchar(1000),
@ROWCOUNT int,
@TRANCOUNT int,
@OUTPUT_ERRORCODE int,
@OUTPUT_ERRORDESC varchar(1000),

@OLD_COURSE_START_DATE datetime,
@OLD_COURSE_LOC_ID varchar(11),
@OLD_LOC_REGION varchar(50),
@NEW_LOC_REGION varchar(50),
@USER_SELCO_SP_ID varchar(11),
@COURSE_ORG_ID varchar(11),
@COURSE_ADD_ID varchar(11),
@COURSE_U_DATE_1 datetime,
@COURSE_U_DATE_2 datetime,
@COURSE_U_DATE_3 datetime,
@COURSE_U_DATE_4 datetime,
@COURSE_U_DATE_5 datetime,
@COURSE_U_DATE_6 datetime,

@ACT_ID varchar(11),
@ACT_ADDRESS nvarchar(255),

@OLD_LIST_ID varchar(11),
@CRS_ID varchar(11),

@intDiff int,
@CBL_ID int,
@New tinyint,

@COURSE_REF varchar(40),

@SC_COURSE_REF_FORMAT int,
@SC_COURSE_DELIMITER char,
@INSTANCE_NO varchar(10),
@PROD_COURSE_LEN float,
@COUNTER int,
@PROD_INV_ZERO_VAL tinyint, --CIPD RFC (Flexible Learning) 
@SC_EVENT_LENGTH int,
@OLD_COURSE_STATUS varchar(40)

SET NOCOUNT ON
SET @TRANCOUNT = @@TRANCOUNT

if @TRANCOUNT = 0
BEGIN
	BEGIN TRANSACTION
END

set @PA_USER_LOGIN_ID2 = @PA_USER_LOGIN_ID
select @SP_DB_ID=SP_DB_ID from dbo.Sys_Params  where SP_ID = '1'

if datalength(@SP_DB_ID) > 0
BEGIN
	select @PA_USER_LOGIN_ID2 = @PA_USER_LOGIN_ID2 + '-' + @SP_DB_ID
END

select @USER_SELCO_SP_ID=isnull(USER_SELCO_SP_ID,'1')
from dbo.STUSER
where USER_LOGIN_ID = @PA_USER_LOGIN_ID

if nullif(@PA_COURSE_SUPPLIER_ID,'') is null and nullif(@PA_COURSE_SUP_ROLE_ID,'') is not null
BEGIN
	set @PA_COURSE_SUPPLIER_ID = (Select PROLE_ORG_ID from Person_Role where PROLE_ID = @PA_COURSE_SUP_ROLE_ID)
END


if @PA_COURSE_ID is not null and datalength(@PA_COURSE_ID) > 0
BEGIN
	set @New = 0
	set @OLD_LIST_ID = (Select top 1 LIST_ID from dbo.LIST  where LIST_COURSE_ID = @PA_COURSE_ID)

	select
	@OLD_COURSE_START_DATE = COURSE_START_DATE,
	@OLD_COURSE_LOC_ID = COURSE_LOC_ID,
	@COURSE_ADD_ID = COURSE_ADD_ID,
	@COURSE_ORG_ID = COURSE_ORG_ID,
	@OLD_COURSE_STATUS = COURSE_STATUS
	from dbo.COURSE
	where COURSE_ID = @PA_COURSE_ID
	
	If isnull(@OLD_COURSE_LOC_ID,'') <> isnull(@PA_COURSE_LOC_ID,'') --datalength(isnull(@OLD_COURSE_LOC_ID,''))=0 and datalength(isnull(@PA_COURSE_LOC_ID,''))>0
	begin
		exec spfnUpdateCourseResources
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_LOC_ID = @PA_COURSE_LOC_ID	
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END		
	end
	
	Select @ACT_ADDRESS = ADD_MAILSTRING from dbo.ADDRESS  where ADD_ID = @COURSE_ADD_ID

	--Check if the location is changed
	set @NEW_LOC_REGION = ''
	select @NEW_LOC_REGION=LOC_REGION from location where LOC_ID = @PA_COURSE_LOC_ID
	set @OLD_LOC_REGION = ''
	select @OLD_LOC_REGION=ISNULL(LOC_REGION, '') from location inner join course ON COURSE_LOC_ID = LOC_ID where COURSE_ID = @PA_COURSE_ID
		
	update Course set
	COURSE_MOD_DATE = GetDate(),
	COURSE_MOD_BY = @PA_USER_LOGIN_ID2,
	COURSE_PERSON_ID = COALESCE(@PA_COURSE_PERSON_ID,COURSE_PERSON_ID),
	COURSE_PRODUCT_ID = COALESCE(@PA_COURSE_PRODUCT_ID,COURSE_PRODUCT_ID),
	COURSE_LOC_ID = COALESCE(@PA_COURSE_LOC_ID,COURSE_LOC_ID),
	COURSE_ORG_ID = COALESCE(@PA_COURSE_ORG_ID,COURSE_ORG_ID),
	COURSE_REF = COALESCE(@PA_COURSE_REF,COURSE_REF),
	COURSE_NAME = COALESCE(@PA_COURSE_NAME,COURSE_NAME),
	COURSE_TYPE = COALESCE(@PA_COURSE_TYPE,COURSE_TYPE),
	COURSE_SECTOR = COALESCE(@PA_COURSE_SECTOR,COURSE_SECTOR),
	COURSE_ON_SITE = COALESCE(@PA_COURSE_ON_SITE,COURSE_ON_SITE),
	COURSE_BLOCK_PRICD = COALESCE(@PA_COURSE_BLOCK_PRICD,COURSE_BLOCK_PRICD),
	COURSE_START_DATE = dbo.fnDateCoalesce(@PA_COURSE_START_DATE,COURSE_START_DATE),
	COURSE_END_DATE = dbo.fnDateCoalesce(@PA_COURSE_END_DATE,COURSE_END_DATE),
	COURSE_START_TIME = dbo.fnDateCoalesce(@PA_COURSE_START_TIME,COURSE_START_TIME),
	COURSE_END_TIME = dbo.fnDateCoalesce(@PA_COURSE_END_TIME,COURSE_END_TIME),
	COURSE_STATUS = COALESCE(@PA_COURSE_STATUS,COURSE_STATUS),
	COURSE_DIARY_TYPE = COALESCE(@PA_COURSE_DIARY_TYPE,COURSE_DIARY_TYPE),
	COURSE_LENGTH = COALESCE(@PA_COURSE_LENGTH,COURSE_LENGTH),
	COURSE_MIN_PLACES = COALESCE(@PA_COURSE_MIN_PLACES,COURSE_MIN_PLACES),
	COURSE_MAX_PLACES = COALESCE(@PA_COURSE_MAX_PLACES,COURSE_MAX_PLACES),
	COURSE_FREE_PLACES = COALESCE(@PA_COURSE_FREE_PLACES,COURSE_FREE_PLACES),
	COURSE_CONF_PLACES = COALESCE(@PA_COURSE_CONF_PLACES,COURSE_CONF_PLACES),
	COURSE_PROVIS_BKGS = COALESCE(@PA_COURSE_PROVIS_BKGS,COURSE_PROVIS_BKGS),
	COURSE_RESV_PLACES = COALESCE(@PA_COURSE_RESV_PLACES,COURSE_RESV_PLACES),
	COURSE_WAITING = COALESCE(@PA_COURSE_WAITING,COURSE_WAITING),
	COURSE_CANCELS = COALESCE(@PA_COURSE_CANCELS,COURSE_CANCELS),
	COURSE_BLOCK_THRES = COALESCE(@PA_COURSE_BLOCK_THRES,COURSE_BLOCK_THRES),
	COURSE_BLOCK_PRICE = COALESCE(@PA_COURSE_BLOCK_PRICE,COURSE_BLOCK_PRICE),
	COURSE_STUDT_PRICE = COALESCE(@PA_COURSE_STUDT_PRICE,COURSE_STUDT_PRICE),
	COURSE_EST_PUR_PRC = COALESCE(@PA_COURSE_EST_PUR_PRC,COURSE_EST_PUR_PRC),
	COURSE_NO_HOURS = COALESCE(@PA_COURSE_NO_HOURS,COURSE_NO_HOURS),
	COURSE_VAT_CODE = COALESCE(@PA_COURSE_VAT_CODE,COURSE_VAT_CODE),
	COURSE_COST_CODE = COALESCE(@PA_COURSE_COST_CODE,COURSE_COST_CODE),
	COURSE_REV_CODE = COALESCE(@PA_COURSE_REV_CODE,COURSE_REV_CODE),
	COURSE_JN_INF_ORDE = COALESCE(@PA_COURSE_JN_INF_ORDE,COURSE_JN_INF_ORDE),
	COURSE_NOTES = COALESCE(@PA_COURSE_NOTES,COURSE_NOTES),
	COURSE_INT_NOTES = COALESCE(@PA_COURSE_INT_NOTES,COURSE_INT_NOTES),
	COURSE_TUC_REGION = COALESCE(@PA_COURSE_TUC_REGION,COURSE_TUC_REGION),
	COURSE_BUDGET = COALESCE(@PA_COURSE_BUDGET,COURSE_BUDGET),
	COURSE_ACTUAL = COALESCE(@PA_COURSE_ACTUAL,COURSE_ACTUAL),
	COURSE_PAY_FAG = COALESCE(@PA_COURSE_PAY_FAG,COURSE_PAY_FAG),
	COURSE_PAY_DATE = COALESCE(@PA_COURSE_PAY_DATE,COURSE_PAY_DATE),
	COURSE_PAY_CHEQ_NO = COALESCE(@PA_COURSE_PAY_CHEQ_NO,COURSE_PAY_CHEQ_NO),
	COURSE_COLL_INV_NO = COALESCE(@PA_COURSE_COLL_INV_NO,COURSE_COLL_INV_NO),
	COURSE_INCL_OUTLIN = COALESCE(@PA_COURSE_INCL_OUTLIN,COURSE_INCL_OUTLIN),
	COURSE_INCL_MAP = COALESCE(@PA_COURSE_INCL_MAP,COURSE_INCL_MAP),
	COURSE_INC_SPC_INS = COALESCE(@PA_COURSE_INC_SPC_INS,COURSE_INC_SPC_INS),
	COURSE_INCL_BK_FRM = COALESCE(@PA_COURSE_INCL_BK_FRM,COURSE_INCL_BK_FRM),
	COURSE_INC_PST_QST = COALESCE(@PA_COURSE_INC_PST_QST,COURSE_INC_PST_QST),
	COURSE_INC_PRE_SRV = COALESCE(@PA_COURSE_INC_PRE_SRV,COURSE_INC_PRE_SRV),
	COURSE_BUD_PERIOD = COALESCE(@PA_COURSE_BUD_PERIOD,COURSE_BUD_PERIOD),
	COURSE_BUD_FORECST = COALESCE(@PA_COURSE_BUD_FORECST,COURSE_BUD_FORECST),
	COURSE_SOURCE_CODE = COALESCE(@PA_COURSE_SOURCE_CODE,COURSE_SOURCE_CODE),
	COURSE_PERSON_ID_2 = COALESCE(@PA_COURSE_PERSON_ID_2,COURSE_PERSON_ID_2),
	COURSE_CLASS = COALESCE(@PA_COURSE_CLASS,COURSE_CLASS),
	COURSE_HOST_NAME = COALESCE(@PA_COURSE_HOST_NAME,COURSE_HOST_NAME),
	COURSE_VENU_ACTUAL = COALESCE(@PA_COURSE_VENU_ACTUAL,COURSE_VENU_ACTUAL),
	COURSE_VENU_BUDGET = COALESCE(@PA_COURSE_VENU_BUDGET,COURSE_VENU_BUDGET),
	COURSE_CATER_ACTUL = COALESCE(@PA_COURSE_CATER_ACTUL,COURSE_CATER_ACTUL),
	COURSE_CATER_BDGET = COALESCE(@PA_COURSE_CATER_BDGET,COURSE_CATER_BDGET),
	COURSE_HOTEL_ACTUL = COALESCE(@PA_COURSE_HOTEL_ACTUL,COURSE_HOTEL_ACTUL),
	COURSE_HOTEL_BDGET = COALESCE(@PA_COURSE_HOTEL_BDGET,COURSE_HOTEL_BDGET),
	COURSE_EQUIP_ACTUL = COALESCE(@PA_COURSE_EQUIP_ACTUL,COURSE_EQUIP_ACTUL),
	COURSE_EQUIP_BDGET = COALESCE(@PA_COURSE_EQUIP_BDGET,COURSE_EQUIP_BDGET),
	COURSE_TRAV_ACTUAL = COALESCE(@PA_COURSE_TRAV_ACTUAL,COURSE_TRAV_ACTUAL),
	COURSE_TRAV_BUDGET = COALESCE(@PA_COURSE_TRAV_BUDGET,COURSE_TRAV_BUDGET),
	COURSE_EXP_ACTUAL = COALESCE(@PA_COURSE_EXP_ACTUAL,COURSE_EXP_ACTUAL),
	COURSE_EXP_BUDGET = COALESCE(@PA_COURSE_EXP_BUDGET,COURSE_EXP_BUDGET),
	COURSE_OTHR_ACTUAL = COALESCE(@PA_COURSE_OTHR_ACTUAL,COURSE_OTHR_ACTUAL),
	COURSE_OTHR_BUDGET = COALESCE(@PA_COURSE_OTHR_BUDGET,COURSE_OTHR_BUDGET),
	COURSE_QUEST_LETT = COALESCE(@PA_COURSE_QUEST_LETT,COURSE_QUEST_LETT),
	COURSE_SURV_LETT = COALESCE(@PA_COURSE_SURV_LETT,COURSE_SURV_LETT),
	COURSE_BOOK_ACTUAL = COALESCE(@PA_COURSE_BOOK_ACTUAL,COURSE_BOOK_ACTUAL),
	COURSE_ACTUAL_TOT = COALESCE(@PA_COURSE_ACTUAL_TOT,COURSE_ACTUAL_TOT),
	COURSE_INCL_JOIN = COALESCE(@PA_COURSE_INCL_JOIN,COURSE_INCL_JOIN),
	COURSE_INC_CONFIRM = COALESCE(@PA_COURSE_INC_CONFIRM,COURSE_INC_CONFIRM),
	COURSE_JOIN_LETT = COALESCE(@PA_COURSE_JOIN_LETT,COURSE_JOIN_LETT),
	COURSE_CONFRM_LETT = COALESCE(@PA_COURSE_CONFRM_LETT,COURSE_CONFRM_LETT),
	COURSE_PROV_LETT = COALESCE(@PA_COURSE_PROV_LETT,COURSE_PROV_LETT),
	COURSE_INV_LETT = COALESCE(@PA_COURSE_INV_LETT,COURSE_INV_LETT),
	COURSE_DO_NOT_INVC = COALESCE(@PA_COURSE_DO_NOT_INVC,COURSE_DO_NOT_INVC),
	COURSE_CANCEL_DATE = COALESCE(@PA_COURSE_CANCEL_DATE,COURSE_CANCEL_DATE),
	COURSE_CANCEL_BY = COALESCE(@PA_COURSE_CANCEL_BY,COURSE_CANCEL_BY),
	COURSE_INC_CSH_INV = COALESCE(@PA_COURSE_INC_CSH_INV,COURSE_INC_CSH_INV),
	COURSE_INC_PRO_FRM = COALESCE(@PA_COURSE_INC_PRO_FRM,COURSE_INC_PRO_FRM),
	COURSE_INC_RECEIPT = COALESCE(@PA_COURSE_INC_RECEIPT,COURSE_INC_RECEIPT),
	COURSE_CMC = COALESCE(@PA_COURSE_CMC,COURSE_CMC),
	COURSE_PL_ID = COALESCE(@PA_COURSE_PL_ID,COURSE_PL_ID),
	COURSE_SUPPLIER_ID = COALESCE(@PA_COURSE_SUPPLIER_ID,COURSE_SUPPLIER_ID),
	COURSE_BREAK_EVEN = COALESCE(@PA_COURSE_BREAK_EVEN,COURSE_BREAK_EVEN),
	COURSE_CHANGE_HIST = COALESCE(@PA_COURSE_CHANGE_HIST,COURSE_CHANGE_HIST),
	COURSE_BIP = COALESCE(@PA_COURSE_BIP,COURSE_BIP),
	COURSE_QUEST_ID = COALESCE(@PA_COURSE_QUEST_ID,COURSE_QUEST_ID),
	COURSE_POST_ID = COALESCE(@PA_COURSE_POST_ID,COURSE_POST_ID),
	COURSE_ORDER_NO = COALESCE(@PA_COURSE_ORDER_NO,COURSE_ORDER_NO),
	COURSE_USERMULTI_1 = COALESCE(@PA_COURSE_USERMULTI_1,COURSE_USERMULTI_1),
	COURSE_PROV_PACK = COALESCE(@PA_COURSE_PROV_PACK,COURSE_PROV_PACK),
	COURSE_CONF_PACK = COALESCE(@PA_COURSE_CONF_PACK,COURSE_CONF_PACK),
	COURSE_JOINING_PACK = COALESCE(@PA_COURSE_JOINING_PACK,COURSE_JOINING_PACK),
	COURSE_POST_PACK = COALESCE(@PA_COURSE_POST_PACK,COURSE_POST_PACK),
	COURSE_PROV_INV = COALESCE(@PA_COURSE_PROV_INV,COURSE_PROV_INV),
	COURSE_CONF_INV = COALESCE(@PA_COURSE_CONF_INV,COURSE_CONF_INV),
	COURSE_JOIN_INV = COALESCE(@PA_COURSE_JOIN_INV,COURSE_JOIN_INV),
	COURSE_POST_INV = COALESCE(@PA_COURSE_POST_INV,COURSE_POST_INV),
	COURSE_PERIOD = COALESCE(@PA_COURSE_PERIOD,COURSE_PERIOD),
	COURSE_SEARCH_NAME = COALESCE(@PA_COURSE_SEARCH_NAME,COURSE_SEARCH_NAME),
	COURSE_EVR_ID = COALESCE(@PA_COURSE_EVR_ID,COURSE_EVR_ID),
	COURSE_OPP_ID = COALESCE(@PA_COURSE_OPP_ID,COURSE_OPP_ID),
	COURSE_SESS_COUNT = COALESCE(@PA_COURSE_SESS_COUNT,COURSE_SESS_COUNT),
	COURSE_PRIVATE = COALESCE(@PA_COURSE_PRIVATE,COURSE_PRIVATE),
	COURSE_PLAN_ID = COALESCE(@PA_COURSE_PLAN_ID,COURSE_PLAN_ID),
	COURSE_PLAN_NAME = COALESCE(@PA_COURSE_PLAN_NAME,COURSE_PLAN_NAME),
	COURSE_WEB = COALESCE(@PA_COURSE_WEB,COURSE_WEB),
	COURSE_GRADES = COALESCE(@PA_COURSE_GRADES,COURSE_GRADES),
	COURSE_DESC_TXT_ID = COALESCE(@PA_COURSE_DESC_TXT_ID,COURSE_DESC_TXT_ID),
	COURSE_TARG_TXT_ID = COALESCE(@PA_COURSE_TARG_TXT_ID,COURSE_TARG_TXT_ID),
	COURSE_SETUP_TIME = COALESCE(@PA_COURSE_SETUP_TIME,COURSE_SETUP_TIME),
	COURSE_DATE_DEC = COALESCE(@PA_COURSE_DATE_DEC,COURSE_DATE_DEC),
	COURSE_NUM_INVITE = COALESCE(@PA_COURSE_NUM_INVITE,COURSE_NUM_INVITE),
	COURSE_PERSON_ID_3 = COALESCE(@PA_COURSE_PERSON_ID_3,COURSE_PERSON_ID_3),
	COURSE_PERSON_ID_4 = COALESCE(@PA_COURSE_PERSON_ID_4,COURSE_PERSON_ID_4),
	COURSE_BU_ID = COALESCE(@PA_COURSE_BU_ID,COURSE_BU_ID),
	COURSE_USERNUM_1 = COALESCE(@PA_COURSE_USERNUM_1,COURSE_USERNUM_1),
	COURSE_USERNUM_2 = COALESCE(@PA_COURSE_USERNUM_2,COURSE_USERNUM_2),
	COURSE_URL = COALESCE(@PA_COURSE_URL,COURSE_URL),
	COURSE_PROJ_ID = COALESCE(@PA_COURSE_PROJ_ID,COURSE_PROJ_ID),
	COURSE_CODE = COALESCE(@PA_COURSE_CODE,COURSE_CODE),
	COURSE_BT_ID = COALESCE(@PA_COURSE_BT_ID,COURSE_BT_ID),
	COURSE_COMMENTS = COALESCE(@PA_COURSE_COMMENTS,COURSE_COMMENTS),
	COURSE_3RD_PARTY = COALESCE(@PA_COURSE_3RD_PARTY,COURSE_3RD_PARTY),
	COURSE_U_DATE_1 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_1,COURSE_U_DATE_1),
	COURSE_U_DATE_2 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_2,COURSE_U_DATE_2),
	COURSE_U_DATE_3 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_3,COURSE_U_DATE_3),
	COURSE_U_DATE_4 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_4,COURSE_U_DATE_4),
	COURSE_USERNUM_3 = COALESCE(@PA_COURSE_USERNUM_3,COURSE_USERNUM_3),
	COURSE_ADD_ID = COALESCE(@PA_COURSE_ADD_ID,COURSE_ADD_ID),
	COURSE_NAME2 = COALESCE(@PA_COURSE_NAME2,COURSE_NAME2),
	COURSE_USERCHAR_1 = COALESCE(@PA_COURSE_USERCHAR_1,COURSE_USERCHAR_1),
	COURSE_USERCHAR_2 = COALESCE(@PA_COURSE_USERCHAR_2,COURSE_USERCHAR_2),
	COURSE_USERCHAR_3 = COALESCE(@PA_COURSE_USERCHAR_3,COURSE_USERCHAR_3),
	COURSE_USERCHAR_4 = COALESCE(@PA_COURSE_USERCHAR_4,COURSE_USERCHAR_4),
	COURSE_SUP_ROLE_ID = COALESCE(@PA_COURSE_SUP_ROLE_ID,COURSE_SUP_ROLE_ID),
	COURSE_CURRENCY = COALESCE(@PA_COURSE_CURRENCY,COURSE_CURRENCY),
	COURSE_PRICE_A = COALESCE(@PA_COURSE_PRICE_A,COURSE_PRICE_A),
	COURSE_PRICE_B = COALESCE(@PA_COURSE_PRICE_B,COURSE_PRICE_B),
	COURSE_PRICE_C = COALESCE(@PA_COURSE_PRICE_C,COURSE_PRICE_C),
	COURSE_PRICE_D = COALESCE(@PA_COURSE_PRICE_D,COURSE_PRICE_D),
	COURSE_PRICE_E = COALESCE(@PA_COURSE_PRICE_E,COURSE_PRICE_E),
	COURSE_SELCO_SP_ID = COALESCE(@PA_COURSE_SELCO_SP_ID,COURSE_SELCO_SP_ID),
	COURSE_USERNUM_4 = COALESCE(@PA_COURSE_USERNUM_4,COURSE_USERNUM_4),
	COURSE_USERNUM_5 = COALESCE(@PA_COURSE_USERNUM_5,COURSE_USERNUM_5),
	COURSE_USERNUM_6 = COALESCE(@PA_COURSE_USERNUM_6,COURSE_USERNUM_6),
	COURSE_USERNUM_7 = COALESCE(@PA_COURSE_USERNUM_7,COURSE_USERNUM_7),
	COURSE_CHARGABLE = COALESCE(@PA_COURSE_CHARGABLE,COURSE_CHARGABLE),
	COURSE_INVOICED = COALESCE(@PA_COURSE_INVOICED,COURSE_INVOICED),
	COURSE_BKT_ID = COALESCE(@PA_COURSE_BKT_ID,COURSE_BKT_ID),
	COURSE_CONTPROL_ID = COALESCE(@PA_COURSE_CONTPROL_ID,COURSE_CONTPROL_ID),
	COURSE_BUD_REV = COALESCE(@PA_COURSE_BUD_REV,COURSE_BUD_REV),
	COURSE_BUD_FORCAST = COALESCE(@PA_COURSE_BUD_FORCAST,COURSE_BUD_FORCAST),
	COURSE_U_DATE_5 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_5,COURSE_U_DATE_5),
	COURSE_U_DATE_6 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_6,COURSE_U_DATE_6),
	COURSE_USERCHAR_5 = COALESCE(@PA_COURSE_USERCHAR_5,COURSE_USERCHAR_5),
	COURSE_USERCHAR_6 = COALESCE(@PA_COURSE_USERCHAR_6,COURSE_USERCHAR_6),
	COURSE_U_TINT_1 = COALESCE(@PA_COURSE_U_TINT_1,COURSE_U_TINT_1),
	COURSE_U_TINT_2 = COALESCE(@PA_COURSE_U_TINT_2,COURSE_U_TINT_2),
	COURSE_U_TINT_3 = COALESCE(@PA_COURSE_U_TINT_3,COURSE_U_TINT_3),
	COURSE_U_TINT_4 = COALESCE(@PA_COURSE_U_TINT_4,COURSE_U_TINT_4),
	COURSE_U_TINT_5 = COALESCE(@PA_COURSE_U_TINT_5,COURSE_U_TINT_5),
	COURSE_U_TINT_6 = COALESCE(@PA_COURSE_U_TINT_6,COURSE_U_TINT_6),
	COURSE_SY_TYPE = COALESCE(@PA_COURSE_SY_TYPE,COURSE_SY_TYPE),
	COURSE_PREJOIN_PACK = COALESCE(@PA_COURSE_PREJOIN_PACK,COURSE_PREJOIN_PACK),
	COURSE_PSTJOIN_PACK = COALESCE(@PA_COURSE_PSTJOIN_PACK,COURSE_PSTJOIN_PACK),
	COURSE_BOOK_ACT_BC2 = COALESCE(@PA_COURSE_BOOK_ACT_BC2,COURSE_BOOK_ACT_BC2),
	COURSE_ACT_TOT_BC2 = COALESCE(@PA_COURSE_ACT_TOT_BC2,COURSE_ACT_TOT_BC2),
	COURSE_PROV_SENT_DTE = COALESCE(@PA_COURSE_PROV_SENT_DTE,COURSE_PROV_SENT_DTE),
	COURSE_CONF_SENT_DTE = COALESCE(@PA_COURSE_CONF_SENT_DTE,COURSE_CONF_SENT_DTE),
	COURSE_JOIN_SENT_DTE = COALESCE(@PA_COURSE_JOIN_SENT_DTE,COURSE_JOIN_SENT_DTE),
	COURSE_PP_SENT_DTE = COALESCE(@PA_COURSE_PP_SENT_DTE,COURSE_PP_SENT_DTE),
	COURSE_PRJOIN_SENT_DTE = COALESCE(@PA_COURSE_PRJOIN_SENT_DTE,COURSE_PRJOIN_SENT_DTE),
	COURSE_POJOIN_SENT_DTE = COALESCE(@PA_COURSE_POJOIN_SENT_DTE,COURSE_POJOIN_SENT_DTE),
	COURSE_CUT_PRD = COALESCE(@PA_COURSE_CUT_PRD,COURSE_CUT_PRD),
	COURSE_PROV_ORG_ID = COALESCE(@PA_COURSE_PROV_ORG_ID,COURSE_PROV_ORG_ID),
	COURSE_ALLOC_STATUS = COALESCE(@PA_COURSE_ALLOC_STATUS,COURSE_ALLOC_STATUS),
	COURSE_EST_HOURS = COALESCE(@PA_COURSE_EST_HOURS,COURSE_EST_HOURS),
	COURSE_FLOAT = COALESCE(@PA_COUSE_FLOAT,COURSE_FLOAT),
	COURSE_QUAL_DEL = COALESCE(@PA_COURSE_QUAL_DEL,COURSE_QUAL_DEL),
	COURSE_COH_ONLY = COALESCE(@PA_COURSE_COH_ONLY,COURSE_COH_ONLY),
	COURSE_ANALYSIS_1 = COALESCE(@PA_COURSE_ANALYSIS_1,COURSE_ANALYSIS_1),
	COURSE_ANALYSIS_2 = COALESCE(@PA_COURSE_ANALYSIS_2,COURSE_ANALYSIS_2),
	COURSE_PROV_PROLE_ID = COALESCE(@PA_COURSE_PROV_PROLE_ID,COURSE_PROV_PROLE_ID),
	COURSE_SUP_STATUS = COALESCE(@PA_COURSE_SUP_STATUS,COURSE_SUP_STATUS),
	COURSE_CODE_LOOKUP1 = COALESCE(@PA_COURSE_CODE_LOOKUP1,COURSE_CODE_LOOKUP1),
	COURSE_FUNDED_ORG_ID = COALESCE(@PA_COURSE_FUNDED_ORG_ID,COURSE_FUNDED_ORG_ID),
	COURSE_OVERBOOK = COALESCE(@PA_COURSE_OVERBOOK,COURSE_OVERBOOK),
	COURSE_FUNDED = COALESCE(@PA_COURSE_FUNDED,COURSE_FUNDED),
	COURSE_DEF_ELEM_ST = COALESCE(@PA_COURSE_DEF_ELEM_ST,COURSE_DEF_ELEM_ST),
	COURSE_BD_COMP_BY = COALESCE(@PA_COURSE_BD_COMP_BY,COURSE_BD_COMP_BY),
	COURSE_BD_COMP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_COMP_DATE,COURSE_BD_COMP_DATE),
	COURSE_BD_TOT_ACT_COST = COALESCE(@PA_COURSE_BD_TOT_ACT_COST,COURSE_BD_TOT_ACT_COST),
	COURSE_BD_STATUS = COALESCE(@PA_COURSE_BD_STATUS,COURSE_BD_STATUS),
	COURSE_BD_PREP_BY = COALESCE(@PA_COURSE_BD_PREP_BY,COURSE_BD_PREP_BY),	
	COURSE_BD_PREP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_PREP_DATE,COURSE_BD_PREP_DATE),	
	COURSE_BD_APP_BY = COALESCE(@PA_COURSE_BD_APP_BY,COURSE_BD_APP_BY),	
	COURSE_BD_APP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_APP_DATE,COURSE_BD_APP_DATE),
	COURSE_BD_TOT_EST_COST = COALESCE(@PA_COURSE_BD_TOT_EST_COST,COURSE_BD_TOT_EST_COST),
	COURSE_CALC_COMMISSION = COALESCE(@PA_COURSE_CALC_COMMISSION,COURSE_CALC_COMMISSION),
	COURSE_BAT_ID = COALESCE(@PA_COURSE_BAT_ID,COURSE_BAT_ID),
	COURSE_CANP_SENT_DTE = dbo.fnDateCoalesce(@PA_COURSE_CANP_SENT_DTE,COURSE_CANP_SENT_DTE),
	COURSE_CANCEL_PACK = COALESCE(@PA_COURSE_CANCEL_PACK,COURSE_CANCEL_PACK),
	COURSE_CANCELLATION_DATE = dbo.fnDateCOALESCE(@PA_COURSE_CANCELLATION_DATE,COURSE_CANCELLATION_DATE),
	COURSE_REASON = COALESCE(@PA_COURSE_REASON,COURSE_REASON),
	COURSE_UNRECOVERABLE_CANC_LOSS = COALESCE(@PA_COURSE_UNRECOVERABLE_CANC_LOSS,COURSE_UNRECOVERABLE_CANC_LOSS),
	COURSE_DEFAULT_TRAINEE_DAYS = COALESCE(@PA_COURSE_DEFAULT_TRAINEE_DAYS,COURSE_DEFAULT_TRAINEE_DAYS),
	COURSE_GRANT_ELIGABLE = COALESCE(@PA_COURSE_GRANT_ELIGABLE,COURSE_GRANT_ELIGABLE),
	COURSE_GRANT_VALUE_AVAILABLE = COALESCE(@PA_COURSE_GRANT_VALUE_AVAILABLE,COURSE_GRANT_VALUE_AVAILABLE),
	COURSE_BREAKEVEN_VALUE1 = COALESCE(@PA_COURSE_BREAKEVEN_VALUE1,COURSE_BREAKEVEN_VALUE1),
	COURSE_BREAKEVEN_VALUE2 = COALESCE(@PA_COURSE_BREAKEVEN_VALUE2,COURSE_BREAKEVEN_VALUE2),
	COURSE_EXT_COURSEWARE = COALESCE(@PA_COURSE_EXT_COURSEWARE,COURSE_EXT_COURSEWARE),
	COURSE_CONTINGENCY = COALESCE(@PA_COURSE_CONTINGENCY,COURSE_CONTINGENCY),
	COURSE_COST = COALESCE(@PA_COURSE_COST,COURSE_COST),
	COURSE_DELIVERY_DAYS = COALESCE(@PA_COURSE_DELIVERY_DAYS,COURSE_DELIVERY_DAYS),
	COURSE_MTR_PROLE_ID = COALESCE(@PA_COURSE_MTR_PROLE_ID,COURSE_MTR_PROLE_ID),
	COURSE_MA_PROLE_ID = COALESCE(@PA_COURSE_MA_PROLE_ID,COURSE_MA_PROLE_ID),
	COURSE_ACADY_CODE = COALESCE(@PA_COURSE_ACADY_CODE,COURSE_ACADY_CODE),
	COURSE_CLONE = COALESCE(@PA_COURSE_CLONE, COURSE_CLONE),
	COURSE_NO_AUTO_UPDATE = COALESCE(@PA_COURSE_NO_AUTO_UPDATE, COURSE_NO_AUTO_UPDATE),
	COURSE_OUT_OF_HOURS = COALESCE(@PA_COURSE_OUT_OF_HOURS,COURSE_OUT_OF_HOURS),
	COURSE_STOP_TRAIN_COMPLETION = COALESCE(@PA_COURSE_STOP_TRAIN_COMPLETION,COURSE_STOP_TRAIN_COMPLETION),
	COURSE_BD_ORIG_COST = COALESCE(@PA_COURSE_BD_ORIG_COST,COURSE_BD_ORIG_COST),
	COURSE_PSH_ID = COALESCE(@PA_COURSE_PSH_ID,COURSE_PSH_ID),
	COURSE_BLOCK_TYPE = COALESCE(@PA_COURSE_BLOCK_TYPE,COURSE_BLOCK_TYPE),
	COURSE_PACK_SEND_PROLE_ID = COALESCE(@PA_COURSE_PACK_SEND_PROLE_ID,COURSE_PACK_SEND_PROLE_ID),
	COURSE_PACK_BCC_EMAIL = COALESCE(@PA_COURSE_PACK_BCC_EMAIL,COURSE_PACK_BCC_EMAIL),
	COURSE_PACK_MDN_EMAIL = COALESCE(@PA_COURSE_PACK_MDN_EMAIL,COURSE_PACK_MDN_EMAIL),
	COURSE_PACK_DSN_EMAIL = COALESCE(@PA_COURSE_PACK_DSN_EMAIL,COURSE_PACK_DSN_EMAIL),
	COURSE_PACK_DSN_OPTIONS = COALESCE(@PA_COURSE_PACK_DSN_OPTIONS,COURSE_PACK_DSN_OPTIONS),
	COURSE_CODE_IMAGE = COALESCE(@PA_COURSE_CODE_IMAGE,COURSE_CODE_IMAGE),
	COURSE_CLIENT_REF = COALESCE(@PA_COURSE_CLIENT_REF,COURSE_CLIENT_REF),
	COURSE_SESSIONS_DESCRIPTION = COALESCE(@PA_COURSE_SESSIONS_DESCRIPTION,COURSE_SESSIONS_DESCRIPTION),
	COURSE_SESSIONS_HEADER = COALESCE(@PA_COURSE_SESSIONS_HEADER,COURSE_SESSIONS_HEADER),
	COURSE_FIRST_LIC_EVENT = COALESCE(@PA_COURSE_FIRST_LIC_EVENT,COURSE_FIRST_LIC_EVENT),
	COURSE_TRNP_ID = COALESCE(@PA_COURSE_TRNP_ID,COURSE_TRNP_ID),
	COURSE_LICENSED = COALESCE(@PA_COURSE_LICENSED,COURSE_LICENSED),
	COURSE_RESULT_REC_DATE = dbo.fnDateCoalesce(@PA_COURSE_RESULT_REC_DATE,COURSE_RESULT_REC_DATE),
	COURSE_PAPERS_REC_DATE = dbo.fnDateCoalesce(@PA_COURSE_PAPERS_REC_DATE,COURSE_PAPERS_REC_DATE),
	COURSE_DELIV_METHD = COALESCE(@PA_COURSE_DELIV_METHD,COURSE_DELIV_METHD),
	COURSE_ITEMS_RECEIVED_DATE = COALESCE(@PA_COURSE_ITEMS_RECEIVED_DATE,COURSE_ITEMS_RECEIVED_DATE),
	COURSE_CUT_PRD_TIME = COALESCE(@PA_COURSE_CUT_PRD_TIME,COURSE_CUT_PRD_TIME)
	where COURSE_ID = @PA_COURSE_ID
	SELECT @ERRORCODE = @@ERROR,@ROWCOUNT = @@ROWCOUNT
	IF @ERRORCODE != 0 GOTO HANDLE_ERROR

	--add regional price changes
	if @OLD_LOC_REGION <> @NEW_LOC_REGION
	begin
		--Create any activity sessions prices from the course product
		exec spInsertCourse_CreatePricesForRegion
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_SY_TYPE = @PA_COURSE_SY_TYPE,
			@PA_COURSE_LOC_ID = @PA_COURSE_LOC_ID,
			@PA_COURSE_START_DATE = @PA_COURSE_START_DATE,
			@PA_COURSE_END_DATE = @PA_COURSE_END_DATE,
			@PA_COURSE_ORG_ID = @PA_COURSE_ORG_ID,
			@PA_COURSE_COST_CODE = @PA_COURSE_COST_CODE,
			@PA_COURSE_REV_CODE = @PA_COURSE_REV_CODE,
			@PA_OLD_LOC_REGION = @OLD_LOC_REGION
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END
	end
	--we have changed the status
	if @OLD_COURSE_STATUS <> isnull(@PA_COURSE_STATUS,'')
	begin
		--we are setting it to will be cancelled
		if @OLD_COURSE_STATUS between '85' and '89' and @PA_COURSE_STATUS<'85'
		begin
			update dbo.Element
				set ELEM_MOD_DATE = getdate(),
					ELEM_MOD_BY= @PA_USER_LOGIN_ID2,
					ELEM_EVENT_CANCEL = 0
			where ELEM_COURSE_ID=@PA_COURSE_ID and ELEM_CANCELLED=0 and ELEM_EVENT_CANCEL=1
		end
		--it was going to be cancelled, but isn't now
		if @PA_COURSE_STATUS between '85' and '89' and @OLD_COURSE_STATUS<'85'
		begin
			update dbo.Element
				set ELEM_MOD_DATE = getdate(),
					ELEM_MOD_BY= @PA_USER_LOGIN_ID2,
					ELEM_EVENT_CANCEL = 1
			where ELEM_COURSE_ID=@PA_COURSE_ID and ELEM_CANCELLED=0 and ELEM_EVENT_CANCEL=0
		end
	end

	-- take the course off the old list
	if datalength(isnull(@OLD_LIST_ID,'')) > 0
	BEGIN
		update dbo.LIST set
		LIST_MOD_DATE = GetDate(),
		LIST_MOD_BY = @PA_USER_LOGIN_ID2,
		LIST_COURSE_ID = null
		where LIST_ID = @OLD_LIST_ID
	END

	if @PA_COURSE_START_DATE is not null
	BEGIN
		if @OLD_COURSE_START_DATE <> @PA_COURSE_START_DATE
		BEGIN
			set @intDiff = DateDiff(d,@OLD_COURSE_START_DATE,@PA_COURSE_START_DATE)
			update dbo.ACTIVITY set
			ACT_MOD_DATE = GetDate(),
			ACT_MOD_BY = @PA_USER_LOGIN_ID2,
			ACT_ACTION_DATE = ACT_ACTION_DATE + @intDiff,
			ACT_END_DATE = ACT_END_DATE + @intDiff
			where ACT_ID in
			(
				select SXREF_ACT_ID from dbo.SESSION_XREF  where
				SXREF_COURSE_ID = @PA_COURSE_ID
				union
				select ACT_ID from dbo.Activity 
				where (ACT_COURSE_ID = @PA_COURSE_ID and ACT_FROM_BOM_TYPE is not null)
			)
		END
	END

	if datalength(isnull(@PA_COURSE_LOC_ID,'')) > 0 and @OLD_COURSE_LOC_ID <> @PA_COURSE_LOC_ID
	BEGIN
		DECLARE LOCATION CURSOR local forward_only static FOR
		Select Distinct ACT_ID
		from dbo.Session_Xref  Inner Join dbo.Activity  ON ACT_ID = SXREF_ACT_ID
		where SXREF_COURSE_ID = @PA_COURSE_ID
		and (ACT_LOC_ID = @OLD_COURSE_LOC_ID or ACT_LOC_ID is null)
		
		OPEN LOCATION

		FETCH LOCATION INTO @ACT_ID
	
		WHILE (@@fetch_status=0)
		BEGIN /* LOCATION Fetch Status */
			Update dbo.ACTIVITY set
				ACT_MOD_DATE = GetDate(),
				ACT_MOD_BY = @PA_USER_LOGIN_ID2,
				ACT_LOC_ID = @PA_COURSE_LOC_ID,
				ACT_ORG_ID = @COURSE_ORG_ID,
				ACT_ADDRESS = @ACT_ADDRESS
			where ACT_ID = @ACT_ID
			AND ACT_TYPE = 'd-session'
			
			exec dbo.spInsertOldSessionDetails
				@PA_USER_LOGIN_ID  = @PA_USER_LOGIN_ID2,
				@PA_ERRORCODE = @ERRORCODE OUTPUT,
				@PA_ERRORDESC = @ERRORDESC OUTPUT,
				@PA_OSD_ACT_ID = @ACT_ID,
				@PA_OSD_ORG_ID = @COURSE_ORG_ID,
				@PA_OSD_ADDRESS = @ACT_ADDRESS,
				@PA_OSD_LOC_ID = @PA_COURSE_LOC_ID
			
			Delete dbo.ACTIVITY_XREF 
			where ACTXREF_ACT_ID = @ACT_ID
			and exists (Select PROD_ID from dbo.PRODUCT where PROD_ID = ACTXREF_PROD_ID and PROD_SY_PRODUCT = 2)

			FETCH LOCATION INTO @ACT_ID

		END /* LOCATION Fetch Status */
		CLOSE LOCATION
		DEALLOCATE LOCATION
	END
END -- update
else
BEGIN -- insert
	set @New = 1
	if (datalength(isnull(@PA_COURSE_PRODUCT_ID,'')) = 0 and @PA_COURSE_DIARY_TYPE <> 'Work Package')
	BEGIN
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'Product ID is mandatory for a new course'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END

	if (datalength(isnull(@PA_COURSE_ORG_ID,'')) = 0 and @PA_COURSE_DIARY_TYPE <> 'Work Package')
	BEGIN
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'Organisation ID is mandatory for a new course'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END

	exec spNextID 35,@PA_COURSE_ID OUTPUT

	set @SC_COURSE_REF_FORMAT = (Select SC_INT_VALUE from dbo.SYS_CONFIG  where SC_KEY_NAME = 'SC_COURSE_REF_FORMAT' and SC_SP_ID = @USER_SELCO_SP_ID )
	set @SC_COURSE_DELIMITER = (Select SC_CHAR_VALUE from dbo.SYS_CONFIG  where SC_KEY_NAME = 'SC_COURSE_DELIMITER' and SC_SP_ID = @USER_SELCO_SP_ID )

	if @SC_COURSE_REF_FORMAT > 0 
	begin
		
		if @SC_COURSE_REF_FORMAT = 1 
		begin
			select @INSTANCE_NO=count(*) + 1 from dbo.COURSE  where COURSE_PRODUCT_ID=@PA_COURSE_PRODUCT_ID -- number of existing course instances
		end
		if (datalength(replace(isnull(@PA_COURSE_REF,''),@SC_COURSE_DELIMITER,'')) = 0) 
		begin
			set @PA_COURSE_REF = null
		end


		if @SC_COURSE_REF_FORMAT = 2 
		begin
			set @INSTANCE_NO = isnull((select max(convert(bigint,case when DATALENGTH(COALESCE(@PA_COURSE_REF,PROD_REF,PROD_ID))>0 then
											case when SUBSTRING(COURSE_REF,1,DATALENGTH(COALESCE(@PA_COURSE_REF,PROD_REF,PROD_ID))) = COALESCE(@PA_COURSE_REF,PROD_REF,PROD_ID) then
												convert(bigint,dbo.fnStripAlphas(isnull(substring(COURSE_REF,DATALENGTH(COALESCE(@PA_COURSE_REF,PROD_REF,PROD_ID)),100),0))) 
											else
												convert(bigint,dbo.fnStripAlphas(isnull(COURSE_REF,0))) 
											end
										else
											convert(bigint,dbo.fnStripAlphas(isnull(COURSE_REF,0))) 
										end))+ 1 from dbo.Course 
										join dbo.Product ON PROD_ID=COURSE_PRODUCT_ID
										where COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID),1)
		end

		if (datalength(replace(isnull(@PA_COURSE_REF,''),@SC_COURSE_DELIMITER,'')) = 0) 
		BEGIN
			if @INSTANCE_NO < 10 -- to stay with at least two digit format
			begin
				if len(isnull(@SC_COURSE_DELIMITER,''))>0 -- delimiter non blank 
				begin
					select @PA_COURSE_REF = isnull(PROD_REF,PROD_ID) + @SC_COURSE_DELIMITER + '0' + CAST(@INSTANCE_NO as varchar(5)) from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
				end
				else
				begin
					select @PA_COURSE_REF = isnull(PROD_REF,PROD_ID) + '0' + CAST(@INSTANCE_NO as varchar(5)) from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
				end
			end
			else
			begin
				if len(isnull(@SC_COURSE_DELIMITER,''))>0 -- delimiter non blank
				begin
					select @PA_COURSE_REF = isnull(PROD_REF,PROD_ID) + @SC_COURSE_DELIMITER + CAST(@INSTANCE_NO as varchar(5)) from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
				end
				else
				begin
					select @PA_COURSE_REF = isnull(PROD_REF,PROD_ID) + CAST(@INSTANCE_NO as varchar(5)) from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID	
				end
			end
		END
		ELSE
		BEGIN
			if len(isnull(@SC_COURSE_DELIMITER,''))>0 -- delimiter non blank
			begin
				select @COURSE_REF = isnull(PROD_REF,PROD_ID) + @SC_COURSE_DELIMITER from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
			end
			else
			begin
				select @COURSE_REF = isnull(PROD_REF,PROD_ID) from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
			end

			If @PA_COURSE_REF = @COURSE_REF
			begin
				if @INSTANCE_NO < 10 -- to stay with at least two digit format
				begin
					set @PA_COURSE_REF = @COURSE_REF + '0' + CAST(@INSTANCE_NO as varchar(5))
				end 
				else
				begin
					set @PA_COURSE_REF = @COURSE_REF + CAST(@INSTANCE_NO as varchar(5))
				end	
			end
		END
	end
	else
	begin
		if (datalength(replace(isnull(@PA_COURSE_REF,''),'/','')) = 0) 
		BEGIN
			select @PA_COURSE_REF = isnull(PROD_REF,PROD_ID) + '/' + @PA_COURSE_ID from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
		END
		ELSE
		BEGIN
			select @COURSE_REF = isnull(PROD_REF,PROD_ID) + '/' from dbo.PRODUCT where PROD_ID = @PA_COURSE_PRODUCT_ID
			If @PA_COURSE_REF = @COURSE_REF
			begin
				set @PA_COURSE_REF = @COURSE_REF + @PA_COURSE_ID
			end
		END
	end

	Select @ACT_ADDRESS = ADD_MAILSTRING from dbo.ADDRESS where ADD_ID = @PA_COURSE_ADD_ID

	if datalength(isnull(@PA_COURSE_PL_ID,'')) = 0
	BEGIN
		select top 1 @PA_COURSE_PL_ID = PL_ID from dbo.Prices inner Join dbo.Price_List ON PL_ID=PRS_PL_ID where PRS_PROD_ID=@PA_COURSE_PRODUCT_ID order by PRS_PRICE desc
	END

	if datalength(isnull(@PA_COURSE_ADD_ID,'')) = 0
	BEGIN
		select @PA_COURSE_ADD_ID = ADDXREF_ADD_ID from dbo.ADDRESS_XREF where ADDXREF_ORG_ID = @PA_COURSE_ORG_ID and ADDXREF_PRINCIPAL = 1
	END

	if datalength(isnull(@PA_COURSE_STATUS,'')) = 0
	BEGIN
		set @PA_COURSE_STATUS = (Select top 1 CODE_VALUE1 from dbo.CODE   where CODE_TYPE = 'COUST' and substring(CODE_VALUE1,1,2) = '00')
	END

	if (datalength(isnull(@PA_COURSE_STATUS,'')) = 0 and @PA_COURSE_DIARY_TYPE <> 'Work Package')
	BEGIN
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'Course Status is mandatory for a new course'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END

	set @PA_COURSE_START_DATE = dbo.fnDateCoalesce(@PA_COURSE_START_DATE,null)
	set @PA_COURSE_END_DATE = dbo.fnDateCoalesce(@PA_COURSE_END_DATE,null)
	set @PA_COURSE_START_TIME = dbo.fnDateCoalesce(@PA_COURSE_START_TIME,null)
	set @PA_COURSE_END_TIME = dbo.fnDateCoalesce(@PA_COURSE_END_TIME,null)

	if @PA_COURSE_MTR_PROLE_ID is null
	BEGIN
		SELECT @PA_COURSE_MTR_PROLE_ID = txref_train_prole_id
		from template_xref (nolock) 
		inner join bill_of_material (nolock) on bom_id=txref_bom_id 
		left outer join person_role (nolock) on prole_id = txref_train_prole_id 
		where bom_parent_id=@PA_COURSE_PRODUCT_ID and bom_type='Syllabus' 
		and txref_trainer=2 and BOM_MAIN_SESSION=1 
	END
	
	if @PA_COURSE_START_DATE is null
	BEGIN
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'Start Date is mandatory for a new course'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END

	if @PA_COURSE_END_DATE is null
	BEGIN
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'End Date is mandatory for a new course'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END
	
	if @PA_COURSE_START_TIME is null
	BEGIN
	if len(@PA_MAIN_BOM_START_TIME) > 0 
		BEGIN
			select @PA_COURSE_START_TIME = @PA_MAIN_BOM_START_TIME
		END
	ELSE
		BEGIN
			select @PA_COURSE_START_TIME = min(BOM_START_TIME)
			From dbo.Bill_Of_Material
			Where BOM_PARENT_ID = @PA_COURSE_PRODUCT_ID
			and BOM_SESSION = 1
			and BOM_REAL = 1
			and BOM_TYPE = 'Syllabus'
			and BOM_END_TIME is not null
		END
	END
	
	if @PA_COURSE_END_TIME is null
	BEGIN
	if len(@PA_MAIN_BOM_END_TIME) > 0 
		BEGIN
			select @PA_COURSE_END_TIME = @PA_MAIN_BOM_END_TIME
		END
	ELSE
		BEGIN
			select @PA_COURSE_END_TIME = max(BOM_END_TIME)
			From dbo.Bill_Of_Material
			Where BOM_PARENT_ID = @PA_COURSE_PRODUCT_ID
			and BOM_SESSION = 1
			and BOM_REAL = 1
			and BOM_TYPE = 'Syllabus'
			and BOM_END_TIME is not null
		END
	END
	
	if ((select count(prs_id) 
		from dbo.prices
		where prs_prod_id = @PA_COURSE_PRODUCT_ID
		) = 0 and @PA_COURSE_DIARY_TYPE <> 'Work Package')
	begin
		SELECT @ERRORCODE = -1,@ROWCOUNT = 1,@ERRORDESC = 'Cannot create new course for a product with no price'
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	end

	if isnull(@PA_COURSE_LENGTH, 0) = 0
	BEGIN
		set @PA_COURSE_LENGTH = datediff(day, @PA_COURSE_START_DATE, @PA_COURSE_END_DATE) + 1
	END
	
	select
	@PA_COURSE_MIN_PLACES = COALESCE(@PA_COURSE_MIN_PLACES,PROD_MIN_ATTEND),
	@PA_COURSE_MAX_PLACES = COALESCE(@PA_COURSE_MAX_PLACES,PROD_MAX_ATTEND),
--	helpcall 14752
--	@PA_COURSE_TYPE = COALESCE(@PA_COURSE_TYPE,PROD_TYPE,'EVENT'),
	@PA_COURSE_NAME = COALESCE(@PA_COURSE_NAME,PROD_NAME),
	@PA_COURSE_COST_CODE = COALESCE(@PA_COURSE_COST_CODE,PROD_COST_CODE),
	@PA_COURSE_REV_CODE = COALESCE(@PA_COURSE_REV_CODE,PROD_REV_CODE),
	@PA_COURSE_CUT_PRD = COALESCE(@PA_COURSE_CUT_PRD,PROD_CUT_PRD),
	@PA_COURSE_QUEST_ID = COALESCE(@PA_COURSE_QUEST_ID,PROD_ENQ_QST_ID),
	@PA_COURSE_POST_ID = COALESCE(@PA_COURSE_POST_ID,PROD_DEL_QST_ID),
	@PA_COURSE_WEB = COALESCE(@PA_COURSE_WEB,PROD_WEB),
	@PA_COURSE_QUAL_DEL = COALESCE(@PA_COURSE_QUAL_DEL,PROD_QUAL_DEL),
	@PA_COURSE_WEB = COALESCE(@PA_COURSE_WEB,PROD_WEB),
	@PA_COURSE_PROV_ORG_ID = COALESCE(@PA_COURSE_PROV_ORG_ID,PROD_SUPPLIER_ID),
	@PA_COURSE_CALC_COMMISSION = COALESCE(@PA_COURSE_CALC_COMMISSION,PROD_CALC_COMMISSION),
	@PA_COURSE_BD_STATUS = COALESCE(@PA_COURSE_BD_STATUS,PROD_BD_STATUS),
	@PA_COURSE_BD_PREP_BY = COALESCE(@PA_COURSE_BD_PREP_BY,PROD_BD_PREP_BY),
	@PA_COURSE_BD_APP_BY = COALESCE(@PA_COURSE_BD_APP_BY,PROD_BD_APP_BY),
	@PA_COURSE_BD_PREP_DATE = COALESCE(@PA_COURSE_BD_PREP_DATE,PROD_BD_PREP_DATE),
	@PA_COURSE_BD_APP_DATE = COALESCE(@PA_COURSE_BD_APP_DATE,PROD_BD_APP_DATE),
	@PA_COURSE_PERSON_ID = COALESCE(@PA_COURSE_PERSON_ID,(select PROLE_PERSON_ID from dbo.PERSON_ROLE where PROLE_ID = PROD_PROLE_ID)),
	@PA_COURSE_DEFAULT_TRAINEE_DAYS= COALESCE(@PA_COURSE_DEFAULT_TRAINEE_DAYS,PROD_DEF_TRAINEE_DAYS),
	@PA_COURSE_GRANT_ELIGABLE= COALESCE(@PA_COURSE_GRANT_ELIGABLE,PROD_GRANT_ELIGIBLE),
	@PA_COURSE_GRANT_VALUE_AVAILABLE= COALESCE(@PA_COURSE_GRANT_VALUE_AVAILABLE,PROD_GRANT_VALUE_AVAILABLE),
	@PA_COURSE_BREAKEVEN_VALUE1= COALESCE(@PA_COURSE_BREAKEVEN_VALUE1,PROD_BREAKEVEN_1),
	@PA_COURSE_BREAKEVEN_VALUE2= COALESCE(@PA_COURSE_BREAKEVEN_VALUE2,PROD_BREAKEVEN_2),
	@PROD_COURSE_LEN = PROD_COURSE_LEN,
	@PROD_INV_ZERO_VAL = PROD_INV_ZERO_VAL,
	@PA_COURSE_CODE_IMAGE = COALESCE(@PA_COURSE_CODE_IMAGE,PROD_CODE_IMAGE),
	@PA_COURSE_CUT_PRD_TIME = COALESCE(@PA_COURSE_CUT_PRD_TIME,PROD_CUT_PRD_TIME)
	from dbo.PRODUCT
	where PROD_ID = @PA_COURSE_PRODUCT_ID
	
	--Added so that if the course product length has been altered used that instead but only if its less than the event length
	if @PROD_COURSE_LEN < @PA_COURSE_LENGTH
	BEGIN
		set @PA_COURSE_LENGTH = @PROD_COURSE_LEN
	END

	set @SC_EVENT_LENGTH = isnull((Select SC_INT_VALUE from dbo.SYS_CONFIG  where SC_KEY_NAME = 'SC_EVENT_LENGTH' and SC_SP_ID = COALESCE(@PA_COURSE_SELCO_SP_ID,'1') ),0)
	
	if @SC_EVENT_LENGTH = 1
	begin
		set @PA_COURSE_LENGTH = @PROD_COURSE_LEN
	end 

	if datalength(isnull(@PA_COURSE_CURRENCY,'')) = 0
	Begin
		--take the currency type from the product's selling co
		select @PA_COURSE_SELCO_SP_ID = PROD_SELCO_SP_ID,@PA_COURSE_CURRENCY=SP_BASE_CURR
		from dbo.product
		join dbo.sys_params ON sp_id = isnull(PROD_SELCO_SP_ID,'1')
		where prod_id = @PA_COURSE_PRODUCT_ID		
	end
	set @COURSE_U_DATE_1 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_1,null)
	set @COURSE_U_DATE_2 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_2,null)
	set @COURSE_U_DATE_3 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_3,null)
	set @COURSE_U_DATE_4 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_4,null)
	set @COURSE_U_DATE_5 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_5,null)
	set @COURSE_U_DATE_6 = dbo.fnDateCoalesce(@PA_COURSE_U_DATE_6,null)
	set @PA_COURSE_BD_COMP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_COMP_DATE,null)
	set @PA_COURSE_BD_PREP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_PREP_DATE,null)
	set @PA_COURSE_BD_APP_DATE = dbo.fnDateCoalesce(@PA_COURSE_BD_APP_DATE,null)
	set @PA_COURSE_CANCELLATION_DATE = dbo.fnDateCoalesce(@PA_COURSE_CANCELLATION_DATE,null)

	Insert into dbo.Course
	(
	COURSE_ID,
	COURSE_LOCK,
	COURSE_ADD_DATE,
	COURSE_ADD_BY,
	COURSE_MOD_DATE,
	COURSE_MOD_BY,
	COURSE_RCV_DATE,
	COURSE_RCV_FROM,
	COURSE_PERSON_ID,
	COURSE_PRODUCT_ID,
	COURSE_LOC_ID,
	COURSE_ORG_ID,
	COURSE_REF,
	COURSE_NAME,
	COURSE_TYPE,
	COURSE_SECTOR,
	COURSE_ON_SITE,
	COURSE_BLOCK_PRICD,
	COURSE_START_DATE,
	COURSE_END_DATE,
	COURSE_START_TIME,
	COURSE_END_TIME,
	COURSE_STATUS,
	COURSE_DIARY_TYPE,
	COURSE_LENGTH,
	COURSE_MIN_PLACES,
	COURSE_MAX_PLACES,
	COURSE_FREE_PLACES,
	COURSE_CONF_PLACES,
	COURSE_PROVIS_BKGS,
	COURSE_RESV_PLACES,
	COURSE_WAITING,
	COURSE_CANCELS,
	COURSE_BLOCK_THRES,
	COURSE_BLOCK_PRICE,
	COURSE_STUDT_PRICE,
	COURSE_EST_PUR_PRC,
	COURSE_NO_HOURS,
	COURSE_VAT_CODE,
	COURSE_COST_CODE,
	COURSE_REV_CODE,
	COURSE_JN_INF_ORDE,
	COURSE_NOTES,
	COURSE_INT_NOTES,
	COURSE_TUC_REGION,
	COURSE_BUDGET,
	COURSE_ACTUAL,
	COURSE_PAY_FAG,
	COURSE_PAY_DATE,
	COURSE_PAY_CHEQ_NO,
	COURSE_COLL_INV_NO,
	COURSE_INCL_OUTLIN,
	COURSE_INCL_MAP,
	COURSE_INC_SPC_INS,
	COURSE_INCL_BK_FRM,
	COURSE_INC_PST_QST,
	COURSE_INC_PRE_SRV,
	COURSE_BUD_PERIOD,
	COURSE_BUD_FORECST,
	COURSE_SOURCE_CODE,
	COURSE_PERSON_ID_2,
	COURSE_CLASS,
	COURSE_HOST_NAME,
	COURSE_VENU_ACTUAL,
	COURSE_VENU_BUDGET,
	COURSE_CATER_ACTUL,
	COURSE_CATER_BDGET,
	COURSE_HOTEL_ACTUL,
	COURSE_HOTEL_BDGET,
	COURSE_EQUIP_ACTUL,
	COURSE_EQUIP_BDGET,
	COURSE_TRAV_ACTUAL,
	COURSE_TRAV_BUDGET,
	COURSE_EXP_ACTUAL,
	COURSE_EXP_BUDGET,
	COURSE_OTHR_ACTUAL,
	COURSE_OTHR_BUDGET,
	COURSE_QUEST_LETT,
	COURSE_SURV_LETT,
	COURSE_BOOK_ACTUAL,
	COURSE_ACTUAL_TOT,
	COURSE_INCL_JOIN,
	COURSE_INC_CONFIRM,
	COURSE_JOIN_LETT,
	COURSE_CONFRM_LETT,
	COURSE_PROV_LETT,
	COURSE_INV_LETT,
	COURSE_DO_NOT_INVC,
	COURSE_CANCEL_DATE,
	COURSE_CANCEL_BY,
	COURSE_INC_CSH_INV,
	COURSE_INC_PRO_FRM,
	COURSE_INC_RECEIPT,
	COURSE_CMC,
	COURSE_PL_ID,
	COURSE_SUPPLIER_ID,
	COURSE_BREAK_EVEN,
	COURSE_CHANGE_HIST,
	COURSE_BIP,
	COURSE_QUEST_ID,
	COURSE_POST_ID,
	COURSE_ORDER_NO,
	COURSE_USERMULTI_1,
	COURSE_PROV_PACK,
	COURSE_CONF_PACK,
	COURSE_JOINING_PACK,
	COURSE_POST_PACK,
	COURSE_PROV_INV,
	COURSE_CONF_INV,
	COURSE_JOIN_INV,
	COURSE_POST_INV,
	COURSE_PERIOD,
	COURSE_SEARCH_NAME,
	COURSE_EVR_ID,
	COURSE_OPP_ID,
	COURSE_SESS_COUNT,
	COURSE_PRIVATE,
	COURSE_PLAN_ID,
	COURSE_PLAN_NAME,
	COURSE_WEB,
	COURSE_GRADES,
	COURSE_DESC_TXT_ID,
	COURSE_TARG_TXT_ID,
	COURSE_SETUP_TIME,
	COURSE_DATE_DEC,
	COURSE_NUM_INVITE,
	COURSE_PERSON_ID_3,
	COURSE_PERSON_ID_4,
	COURSE_BU_ID,
	COURSE_USERNUM_1,
	COURSE_USERNUM_2,
	COURSE_URL,
	COURSE_PROJ_ID,
	COURSE_CODE,
	COURSE_BT_ID,
	COURSE_COMMENTS,
	COURSE_3RD_PARTY,
	COURSE_U_DATE_1,
	COURSE_U_DATE_2,
	COURSE_U_DATE_3,
	COURSE_U_DATE_4,
	COURSE_USERNUM_3,
	COURSE_ADD_ID,
	COURSE_NAME2,
	COURSE_USERCHAR_1,
	COURSE_USERCHAR_2,
	COURSE_USERCHAR_3,
	COURSE_USERCHAR_4,
	COURSE_SUP_ROLE_ID,
	COURSE_CURRENCY,
	COURSE_PRICE_A,
	COURSE_PRICE_B,
	COURSE_PRICE_C,
	COURSE_PRICE_D,
	COURSE_PRICE_E,
	COURSE_SELCO_SP_ID,
	COURSE_USERNUM_4,
	COURSE_USERNUM_5,
	COURSE_USERNUM_6,
	COURSE_USERNUM_7,
	COURSE_CHARGABLE,
	COURSE_INVOICED,
	COURSE_BKT_ID,
	COURSE_CONTPROL_ID,
	COURSE_BUD_REV,
	COURSE_BUD_FORCAST,
	COURSE_U_DATE_5,
	COURSE_U_DATE_6,
	COURSE_USERCHAR_5,
	COURSE_USERCHAR_6,
	COURSE_U_TINT_1,
	COURSE_U_TINT_2,
	COURSE_U_TINT_3,
	COURSE_U_TINT_4,
	COURSE_U_TINT_5,
	COURSE_U_TINT_6,
	COURSE_SY_TYPE,
	COURSE_PREJOIN_PACK,
	COURSE_PSTJOIN_PACK,
	COURSE_BOOK_ACT_BC2,
	COURSE_ACT_TOT_BC2,
	COURSE_PROV_SENT_DTE,
	COURSE_CONF_SENT_DTE,
	COURSE_JOIN_SENT_DTE,
	COURSE_PP_SENT_DTE,
	COURSE_PRJOIN_SENT_DTE,
	COURSE_POJOIN_SENT_DTE,
	COURSE_CUT_PRD,
	COURSE_PROV_ORG_ID,
	COURSE_ALLOC_STATUS,
	COURSE_EST_HOURS,
	COURSE_FLOAT,
	COURSE_COH_ONLY,
	COURSE_QUAL_DEL,
	COURSE_ANALYSIS_1,
	COURSE_ANALYSIS_2,
	COURSE_PROV_PROLE_ID,
	COURSE_SUP_STATUS,
	COURSE_CODE_LOOKUP1,
	COURSE_FUNDED_ORG_ID,
	COURSE_OVERBOOK,
	COURSE_FUNDED,
	COURSE_DEF_ELEM_ST,
	COURSE_BD_COMP_BY,
	COURSE_BD_COMP_DATE,
	COURSE_BD_TOT_ACT_COST,
	COURSE_BD_STATUS,
	COURSE_BD_PREP_BY,
	COURSE_BD_PREP_DATE,
	COURSE_BD_APP_BY,
	COURSE_BD_APP_DATE,
	COURSE_BD_TOT_EST_COST,
	COURSE_CALC_COMMISSION,
	COURSE_BAT_ID,
	COURSE_CANP_SENT_DTE,
	COURSE_CANCEL_PACK,	
	COURSE_CANCELLATION_DATE,
	COURSE_REASON,
	COURSE_UNRECOVERABLE_CANC_LOSS,
	COURSE_DEFAULT_TRAINEE_DAYS,
	COURSE_GRANT_ELIGABLE,
	COURSE_GRANT_VALUE_AVAILABLE,
	COURSE_BREAKEVEN_VALUE1,
	COURSE_BREAKEVEN_VALUE2,
	COURSE_EXT_COURSEWARE,
	COURSE_CONTINGENCY,
	COURSE_COST,
	COURSE_DELIVERY_DAYS,
	COURSE_MTR_PROLE_ID,
	COURSE_MA_PROLE_ID,
	COURSE_ACADY_CODE,
	COURSE_CLONE,
	COURSE_NO_AUTO_UPDATE,
	COURSE_OUT_OF_HOURS,
	COURSE_STOP_TRAIN_COMPLETION,
	COURSE_BD_ORIG_COST,
	COURSE_PSH_ID,
	COURSE_BLOCK_TYPE,
	COURSE_PACK_SEND_PROLE_ID,
	COURSE_PACK_BCC_EMAIL,
	COURSE_PACK_MDN_EMAIL,
	COURSE_PACK_DSN_EMAIL,
	COURSE_PACK_DSN_OPTIONS,
	COURSE_CODE_IMAGE,
	COURSE_CLIENT_REF,
	COURSE_FIRST_LIC_EVENT,
	COURSE_TRNP_ID,
	COURSE_LICENSED,
	COURSE_RESULT_REC_DATE,
	COURSE_DELIV_METHD,
	COURSE_ITEMS_RECEIVED_DATE,
	COURSE_SESSIONS_DESCRIPTION,
	COURSE_SESSIONS_HEADER,
	COURSE_CUT_PRD_TIME
	)
	values
	(
	COALESCE(@PA_COURSE_ID,null),
	0,
	Getdate(),
	@PA_USER_LOGIN_ID2,
	Getdate(),
	@PA_USER_LOGIN_ID2,
	Getdate(),
	@SP_DB_ID,
	COALESCE(@PA_COURSE_PERSON_ID,null),
	COALESCE(@PA_COURSE_PRODUCT_ID,null),
	COALESCE(@PA_COURSE_LOC_ID,null),
	COALESCE(@PA_COURSE_ORG_ID,null),
	COALESCE(@PA_COURSE_REF,null),
	COALESCE(@PA_COURSE_NAME,null),
	COALESCE(@PA_COURSE_TYPE,null),
	COALESCE(@PA_COURSE_SECTOR,null),
	COALESCE(@PA_COURSE_ON_SITE,0),
	COALESCE(@PA_COURSE_BLOCK_PRICD,0),
	@PA_COURSE_START_DATE,
	@PA_COURSE_END_DATE,
	@PA_COURSE_START_TIME,
	@PA_COURSE_END_TIME,
	COALESCE(@PA_COURSE_STATUS,null),
	COALESCE(@PA_COURSE_DIARY_TYPE,null),
	COALESCE(@PA_COURSE_LENGTH,0),
	COALESCE(@PA_COURSE_MIN_PLACES,0),
	COALESCE(@PA_COURSE_MAX_PLACES,0),
	COALESCE(@PA_COURSE_FREE_PLACES,0),
	COALESCE(@PA_COURSE_CONF_PLACES,0),
	COALESCE(@PA_COURSE_PROVIS_BKGS,0),
	COALESCE(@PA_COURSE_RESV_PLACES,0),
	COALESCE(@PA_COURSE_WAITING,0),
	COALESCE(@PA_COURSE_CANCELS,0),
	COALESCE(@PA_COURSE_BLOCK_THRES,0),
	COALESCE(@PA_COURSE_BLOCK_PRICE,0),
	COALESCE(@PA_COURSE_STUDT_PRICE,0),
	COALESCE(@PA_COURSE_EST_PUR_PRC,0),
	COALESCE(@PA_COURSE_NO_HOURS,0),
	COALESCE(@PA_COURSE_VAT_CODE,null),
	COALESCE(@PA_COURSE_COST_CODE,null),
	COALESCE(@PA_COURSE_REV_CODE,null),
	COALESCE(@PA_COURSE_JN_INF_ORDE,null),
	COALESCE(@PA_COURSE_NOTES,null),
	COALESCE(@PA_COURSE_INT_NOTES,null),
	COALESCE(@PA_COURSE_TUC_REGION,null),
	COALESCE(@PA_COURSE_BUDGET,0),
	COALESCE(@PA_COURSE_ACTUAL,0),
	COALESCE(@PA_COURSE_PAY_FAG,0),
	COALESCE(@PA_COURSE_PAY_DATE,null),
	COALESCE(@PA_COURSE_PAY_CHEQ_NO,null),
	COALESCE(@PA_COURSE_COLL_INV_NO,null),
	COALESCE(@PA_COURSE_INCL_OUTLIN,0),
	COALESCE(@PA_COURSE_INCL_MAP,0),
	COALESCE(@PA_COURSE_INC_SPC_INS,0),
	COALESCE(@PA_COURSE_INCL_BK_FRM,0),
	COALESCE(@PA_COURSE_INC_PST_QST,0),
	COALESCE(@PA_COURSE_INC_PRE_SRV,0),
	COALESCE(@PA_COURSE_BUD_PERIOD,null),
	COALESCE(@PA_COURSE_BUD_FORECST,0),
	COALESCE(@PA_COURSE_SOURCE_CODE,null),
	COALESCE(@PA_COURSE_PERSON_ID_2,null),
	COALESCE(@PA_COURSE_CLASS,null),
	COALESCE(@PA_COURSE_HOST_NAME,null),
	COALESCE(@PA_COURSE_VENU_ACTUAL,0),
	COALESCE(@PA_COURSE_VENU_BUDGET,0),
	COALESCE(@PA_COURSE_CATER_ACTUL,0),
	COALESCE(@PA_COURSE_CATER_BDGET,0),
	COALESCE(@PA_COURSE_HOTEL_ACTUL,0),
	COALESCE(@PA_COURSE_HOTEL_BDGET,0),
	COALESCE(@PA_COURSE_EQUIP_ACTUL,0),
	COALESCE(@PA_COURSE_EQUIP_BDGET,0),
	COALESCE(@PA_COURSE_TRAV_ACTUAL,0),
	COALESCE(@PA_COURSE_TRAV_BUDGET,0),
	COALESCE(@PA_COURSE_EXP_ACTUAL,0),
	COALESCE(@PA_COURSE_EXP_BUDGET,0),
	COALESCE(@PA_COURSE_OTHR_ACTUAL,0),
	COALESCE(@PA_COURSE_OTHR_BUDGET,0),
	COALESCE(@PA_COURSE_QUEST_LETT,null),
	COALESCE(@PA_COURSE_SURV_LETT,null),
	COALESCE(@PA_COURSE_BOOK_ACTUAL,0),
	COALESCE(@PA_COURSE_ACTUAL_TOT,0),
	COALESCE(@PA_COURSE_INCL_JOIN,0),
	COALESCE(@PA_COURSE_INC_CONFIRM,0),
	COALESCE(@PA_COURSE_JOIN_LETT,null),
	COALESCE(@PA_COURSE_CONFRM_LETT,null),
	COALESCE(@PA_COURSE_PROV_LETT,null),
	COALESCE(@PA_COURSE_INV_LETT,null),
	COALESCE(@PA_COURSE_DO_NOT_INVC,0),
	COALESCE(@PA_COURSE_CANCEL_DATE,null),
	COALESCE(@PA_COURSE_CANCEL_BY,null),
	COALESCE(@PA_COURSE_INC_CSH_INV,0),
	COALESCE(@PA_COURSE_INC_PRO_FRM,0),
	COALESCE(@PA_COURSE_INC_RECEIPT,0),
	COALESCE(@PA_COURSE_CMC,0),
	COALESCE(@PA_COURSE_PL_ID,null),
	COALESCE(@PA_COURSE_SUPPLIER_ID,null),
	COALESCE(@PA_COURSE_BREAK_EVEN,0),
	COALESCE(@PA_COURSE_CHANGE_HIST,null),
	COALESCE(@PA_COURSE_BIP,0),
	COALESCE(@PA_COURSE_QUEST_ID,null),
	COALESCE(@PA_COURSE_POST_ID,null),
	COALESCE(@PA_COURSE_ORDER_NO,null),
	COALESCE(@PA_COURSE_USERMULTI_1,null),
	COALESCE(@PA_COURSE_PROV_PACK,null),
	COALESCE(@PA_COURSE_CONF_PACK,null),
	COALESCE(@PA_COURSE_JOINING_PACK,null),
	COALESCE(@PA_COURSE_POST_PACK,null),
	COALESCE(@PA_COURSE_PROV_INV,0),
	COALESCE(@PA_COURSE_CONF_INV,0),
	COALESCE(@PA_COURSE_JOIN_INV,0),
	COALESCE(@PA_COURSE_POST_INV,0),
	COALESCE(@PA_COURSE_PERIOD,null),
	COALESCE(@PA_COURSE_SEARCH_NAME,null),
	COALESCE(@PA_COURSE_EVR_ID,null),
	COALESCE(@PA_COURSE_OPP_ID,null),
	COALESCE(@PA_COURSE_SESS_COUNT,0),
	COALESCE(@PA_COURSE_PRIVATE,0),
	COALESCE(@PA_COURSE_PLAN_ID,null),
	COALESCE(@PA_COURSE_PLAN_NAME,null),
	COALESCE(@PA_COURSE_WEB,0),
	COALESCE(@PA_COURSE_GRADES,null),
	COALESCE(@PA_COURSE_DESC_TXT_ID,null),
	COALESCE(@PA_COURSE_TARG_TXT_ID,null),
	COALESCE(@PA_COURSE_SETUP_TIME,null),
	COALESCE(@PA_COURSE_DATE_DEC,null),
	COALESCE(@PA_COURSE_NUM_INVITE,0),
	COALESCE(@PA_COURSE_PERSON_ID_3,null),
	COALESCE(@PA_COURSE_PERSON_ID_4,null),
	COALESCE(@PA_COURSE_BU_ID,null),
	COALESCE(@PA_COURSE_USERNUM_1,null),
	COALESCE(@PA_COURSE_USERNUM_2,null),
	COALESCE(@PA_COURSE_URL,null),
	COALESCE(@PA_COURSE_PROJ_ID,null),
	COALESCE(@PA_COURSE_CODE,null),
	COALESCE(@PA_COURSE_BT_ID,null),
	COALESCE(@PA_COURSE_COMMENTS,null),
	COALESCE(@PA_COURSE_3RD_PARTY,0),
	@COURSE_U_DATE_1,
	@COURSE_U_DATE_2,
	@COURSE_U_DATE_3,
	@COURSE_U_DATE_4,
	COALESCE(@PA_COURSE_USERNUM_3,null),
	COALESCE(@PA_COURSE_ADD_ID,null),
	COALESCE(@PA_COURSE_NAME2,null),
	COALESCE(@PA_COURSE_USERCHAR_1,null),
	COALESCE(@PA_COURSE_USERCHAR_2,null),
	COALESCE(@PA_COURSE_USERCHAR_3,null),
	COALESCE(@PA_COURSE_USERCHAR_4,null),
	COALESCE(@PA_COURSE_SUP_ROLE_ID,null),
	COALESCE(@PA_COURSE_CURRENCY,null),
	COALESCE(@PA_COURSE_PRICE_A,0),
	COALESCE(@PA_COURSE_PRICE_B,0),
	COALESCE(@PA_COURSE_PRICE_C,0),
	COALESCE(@PA_COURSE_PRICE_D,0),
	COALESCE(@PA_COURSE_PRICE_E,0),
	COALESCE(@PA_COURSE_SELCO_SP_ID,'1'),
	COALESCE(@PA_COURSE_USERNUM_4,null),
	COALESCE(@PA_COURSE_USERNUM_5,null),
	COALESCE(@PA_COURSE_USERNUM_6,null),
	COALESCE(@PA_COURSE_USERNUM_7,0),
	COALESCE(@PA_COURSE_CHARGABLE,0),
	COALESCE(@PA_COURSE_INVOICED,0),
	COALESCE(@PA_COURSE_BKT_ID,null),
	COALESCE(@PA_COURSE_CONTPROL_ID,null),
	COALESCE(@PA_COURSE_BUD_REV,null),
	COALESCE(@PA_COURSE_BUD_FORCAST,null),
	@COURSE_U_DATE_5,
	@COURSE_U_DATE_6,
	COALESCE(@PA_COURSE_USERCHAR_5,null),
	COALESCE(@PA_COURSE_USERCHAR_6,null),
	COALESCE(@PA_COURSE_U_TINT_1,0),
	COALESCE(@PA_COURSE_U_TINT_2,0),
	COALESCE(@PA_COURSE_U_TINT_3,0),
	COALESCE(@PA_COURSE_U_TINT_4,0),
	COALESCE(@PA_COURSE_U_TINT_5,0),
	COALESCE(@PA_COURSE_U_TINT_6,0),
	COALESCE(@PA_COURSE_SY_TYPE,0),
	COALESCE(@PA_COURSE_PREJOIN_PACK,null),
	COALESCE(@PA_COURSE_PSTJOIN_PACK,null),
	COALESCE(@PA_COURSE_BOOK_ACT_BC2,null),
	COALESCE(@PA_COURSE_ACT_TOT_BC2,null),
	COALESCE(@PA_COURSE_PROV_SENT_DTE,null),
	COALESCE(@PA_COURSE_CONF_SENT_DTE,null),
	COALESCE(@PA_COURSE_JOIN_SENT_DTE,null),
	COALESCE(@PA_COURSE_PP_SENT_DTE,null),
	COALESCE(@PA_COURSE_PRJOIN_SENT_DTE,null),
	COALESCE(@PA_COURSE_POJOIN_SENT_DTE,null),
	COALESCE(@PA_COURSE_CUT_PRD,0),
	COALESCE(@PA_COURSE_PROV_ORG_ID,null),
	COALESCE(@PA_COURSE_ALLOC_STATUS,0),
	COALESCE(@PA_COURSE_EST_HOURS,null),
	COALESCE(@PA_COUSE_FLOAT,0),
	COALESCE(@PA_COURSE_COH_ONLY,0),
	COALESCE(@PA_COURSE_QUAL_DEL,0),
	COALESCE(@PA_COURSE_ANALYSIS_1,null),
	COALESCE(@PA_COURSE_ANALYSIS_2,null),
	COALESCE(@PA_COURSE_PROV_PROLE_ID,null),
	COALESCE(@PA_COURSE_SUP_STATUS,null),
	COALESCE(@PA_COURSE_SUP_STATUS,null),
	COALESCE(@PA_COURSE_FUNDED_ORG_ID,null),
	COALESCE(@PA_COURSE_OVERBOOK,0),
	COALESCE(@PA_COURSE_FUNDED,0),
	COALESCE(@PA_COURSE_DEF_ELEM_ST,null),
	COALESCE(@PA_COURSE_BD_COMP_BY,null),
	@PA_COURSE_BD_COMP_DATE,
	COALESCE(@PA_COURSE_BD_TOT_ACT_COST,0),
	COALESCE(@PA_COURSE_BD_STATUS,null),
	COALESCE(@PA_COURSE_BD_PREP_BY,null),
	@PA_COURSE_BD_PREP_DATE,
	COALESCE(@PA_COURSE_BD_APP_BY,null),
	@PA_COURSE_BD_APP_DATE,
	COALESCE(@PA_COURSE_BD_TOT_EST_COST,null),	
	COALESCE(@PA_COURSE_CALC_COMMISSION,null),
	COALESCE(@PA_COURSE_BAT_ID,null),
	COALESCE(@PA_COURSE_CANP_SENT_DTE,null),
	COALESCE(@PA_COURSE_CANCEL_PACK,null),	
	@PA_COURSE_CANCELLATION_DATE,	
	COALESCE(@PA_COURSE_REASON,null),
	COALESCE(@PA_COURSE_UNRECOVERABLE_CANC_LOSS,null),
	COALESCE(@PA_COURSE_DEFAULT_TRAINEE_DAYS,null),
	COALESCE(@PA_COURSE_GRANT_ELIGABLE,null),
	COALESCE(@PA_COURSE_GRANT_VALUE_AVAILABLE,null),
	COALESCE(@PA_COURSE_BREAKEVEN_VALUE1,null),
	COALESCE(@PA_COURSE_BREAKEVEN_VALUE2,null),
	COALESCE(@PA_COURSE_EXT_COURSEWARE,null),
	COALESCE(@PA_COURSE_CONTINGENCY,null),
	COALESCE(@PA_COURSE_COST,null),
	COALESCE(@PA_COURSE_DELIVERY_DAYS,null),
	COALESCE(@PA_COURSE_MTR_PROLE_ID,null),
	COALESCE(@PA_COURSE_MA_PROLE_ID,null),
	COALESCE(@PA_COURSE_ACADY_CODE,null),
	COALESCE(@PA_COURSE_CLONE, 0),
	COALESCE(@PA_COURSE_NO_AUTO_UPDATE, 0),
	COALESCE(@PA_COURSE_OUT_OF_HOURS,null),
	COALESCE(@PA_COURSE_STOP_TRAIN_COMPLETION,null),
	COALESCE(@PA_COURSE_BD_ORIG_COST,0),
	COALESCE(@PA_COURSE_PSH_ID,null),
	COALESCE(@PA_COURSE_BLOCK_TYPE,0),
	COALESCE(@PA_COURSE_PACK_SEND_PROLE_ID,null),
	COALESCE(@PA_COURSE_PACK_BCC_EMAIL,null),
	COALESCE(@PA_COURSE_PACK_MDN_EMAIL,null),
	COALESCE(@PA_COURSE_PACK_DSN_EMAIL,null),
	COALESCE(@PA_COURSE_PACK_DSN_OPTIONS,''),
	COALESCE(@PA_COURSE_CODE_IMAGE,''),
	COALESCE(@PA_COURSE_CLIENT_REF,''),
	@PA_COURSE_FIRST_LIC_EVENT,
	COALESCE(@PA_COURSE_TRNP_ID, null),
	COALESCE(@PA_COURSE_LICENSED, 0),
	COALESCE(@PA_COURSE_RESULT_REC_DATE,null),
	COALESCE(@PA_COURSE_DELIV_METHD,null),
	@PA_COURSE_ITEMS_RECEIVED_DATE,
	COALESCE(@PA_COURSE_SESSIONS_DESCRIPTION,''),
	COALESCE(@PA_COURSE_SESSIONS_HEADER,''),
	COALESCE(@PA_COURSE_CUT_PRD_TIME,0)
	)
	SELECT @ERRORCODE = @@ERROR,@ROWCOUNT = @@ROWCOUNT
	IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	
	--Create event rules
	exec spInsertUpdateEVENTRULES 
		@PA_USER_LOGIN_ID = PA_USER_LOGIN_ID,
		@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
		@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
		@PA_CLONE_PROD_ID = @PA_COURSE_PRODUCT_ID,
		@PA_ER_COURSE_ID = @PA_COURSE_ID
	if @OUTPUT_ERRORCODE <> 0
	BEGIN
		SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END
	
	insert into dbo.CourseSelectGroups
		(
		CSG_ADD_DATE,
		CSG_ADD_BY,
		CSG_MOD_DATE,
		CSG_MOD_BY,
		CSG_PSG_ID,
		CSG_COURSE_ID,
		CSG_TYPE,
		CSG_NAME,
		CSG_DESCRIPTION,
		CSG_MIN,
		CSG_MAX,
		CSG_ORDER,
		CSG_ERROR_MESSAGE
		)
	select
		getdate(),
		@PA_USER_LOGIN_ID2,
		getdate(),
		@PA_USER_LOGIN_ID2,
		PSG_ID,
		@PA_COURSE_ID,
		PSG_TYPE,
		PSG_NAME,
		PSG_DESCRIPTION,
		PSG_MIN,
		PSG_MAX,
		PSG_ORDER,
		PSG_ERROR_MESSAGE
	from dbo.ProdSelectGroups
	where PSG_PROD_ID = @PA_COURSE_PRODUCT_ID

	--Create event budgets from course product
	exec spInsertCourse_CreateEventBudgets 
		@PA_USER_LOGIN_ID = PA_USER_LOGIN_ID,
		@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
		@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
		@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
		@PA_COURSE_ID = @PA_COURSE_ID
	if @OUTPUT_ERRORCODE <> 0
	BEGIN
		SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END
	
	--Update with any questionaires that have been attached at the course-product level
	DECLARE @QXREF_QH_ID VARCHAR(11),
	@QXREF_OFFSET_FOR tinyint, 
	@QXREF_LAUNCH_OFFSET integer, 
	@QXREF_REMINDER_OFFSET integer, 
	@QXREF_EXPIRY_OFFSET integer,
	@QXREF_QUEST_TYPE integer

	DECLARE Course_Quest CURSOR local forward_only static FOR
	Select QXREF_QH_ID, QXREF_OFFSET_FOR, QXREF_LAUNCH_OFFSET, QXREF_REMINDER_OFFSET, QXREF_EXPIRY_OFFSET, QXREF_QUEST_TYPE
	From dbo.QUEST_XREF  
	Where QXREF_PROD_ID = @PA_COURSE_PRODUCT_ID
	Order by QXREF_QH_ID
	OPEN Course_Quest 
	FETCH Course_Quest INTO @QXREF_QH_ID, @QXREF_OFFSET_FOR, @QXREF_LAUNCH_OFFSET, @QXREF_REMINDER_OFFSET, @QXREF_EXPIRY_OFFSET, @QXREF_QUEST_TYPE
	WHILE (@@fetch_status=0)
	BEGIN
		exec dbo.spInsertUpdateQuest_Xref
			@PA_USER_LOGIN_ID = PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_QXREF_QH_ID = @QXREF_QH_ID,
			@PA_QXREF_COURSE_ID = @PA_COURSE_ID,
			@PA_QXREF_OFFSET_FOR = @QXREF_OFFSET_FOR, 
			@PA_QXREF_LAUNCH_OFFSET = @QXREF_LAUNCH_OFFSET, 
			@PA_QXREF_REMINDER_OFFSET = @QXREF_REMINDER_OFFSET, 
			@PA_QXREF_EXPIRY_OFFSET = @QXREF_EXPIRY_OFFSET,
			@PA_QXREF_QUEST_TYPE = @QXREF_QUEST_TYPE
			
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			CLOSE Course_Quest
			DEALLOCATE Course_Quest
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END						
		FETCH Course_Quest INTO @QXREF_QH_ID, @QXREF_OFFSET_FOR, @QXREF_LAUNCH_OFFSET, @QXREF_REMINDER_OFFSET, @QXREF_EXPIRY_OFFSET, @QXREF_QUEST_TYPE
	END

	CLOSE Course_Quest
	DEALLOCATE Course_Quest		
	
	IF @PA_NOT_SESSIONS = 0 
	BEGIN
		--Create any activity sessions from the course product
		exec spInsertCourse_CreateSessionsFromBOM
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_SY_TYPE = @PA_COURSE_SY_TYPE,
			@PA_COURSE_LOC_ID = @PA_COURSE_LOC_ID,
			@PA_COURSE_START_DATE = @PA_COURSE_START_DATE,
			@PA_COURSE_END_DATE = @PA_COURSE_END_DATE,
			@PA_COURSE_ORG_ID = @PA_COURSE_ORG_ID,
			@PA_COURSE_COST_CODE = @PA_COURSE_COST_CODE,
			@PA_COURSE_REV_CODE = @PA_COURSE_REV_CODE,
			@PA_PROD_INV_ZERO_VAL = @PROD_INV_ZERO_VAL,
			@PA_MAIN_BOM_START_TIME = @PA_MAIN_BOM_START_TIME,
			@PA_MAIN_BOM_END_TIME = @PA_MAIN_BOM_END_TIME,
			@PA_ROOM_PROD_ID = @PA_ROOM_PROD_ID,
			@PA_MAINSESSION_TRAIN_PROLE_ID =  @PA_TRAIN_PROLE_ID
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END
		
		--Create any event products from the course product
		exec spInsertCourse_CreateProductsFromBOM
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_COST_CODE = @PA_COURSE_COST_CODE,
			@PA_COURSE_REV_CODE = @PA_COURSE_REV_CODE
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END

		--Create any accomodation sessions from the course product
		exec spInsertCourse_CreateAccomodationFromBOM
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_LOC_ID = @PA_COURSE_LOC_ID,
			@PA_COURSE_START_DATE = @PA_COURSE_START_DATE,
			@PA_COURSE_END_DATE = @PA_COURSE_END_DATE,
			@PA_COURSE_ORG_ID = @PA_COURSE_ORG_ID,
			@PA_COURSE_COST_CODE = @PA_COURSE_COST_CODE,
			@PA_COURSE_REV_CODE = @PA_COURSE_REV_CODE
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END

		--Create any activities from the course product
		exec spInsertCourse_CreateActivitiesFromBOM
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
			@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_LOC_ID = @PA_COURSE_LOC_ID,
			@PA_COURSE_START_DATE = @PA_COURSE_START_DATE,
			@PA_COURSE_END_DATE = @PA_COURSE_END_DATE,
			@PA_COURSE_ORG_ID = @PA_COURSE_ORG_ID
		if @OUTPUT_ERRORCODE <> 0
		BEGIN
			SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
			IF @ERRORCODE != 0 GOTO HANDLE_ERROR
		END

		----- Create Exams From BOM --------
		EXEC spInsertCourse_CreateExamsFromBOM 
			@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
			@PA_COURSE_ID = @PA_COURSE_ID,
			@PA_COURSE_PRODUCT_ID = @PA_COURSE_PRODUCT_ID,
			@PA_COURSE_LOC_ID = @PA_COURSE_LOC_ID,
			@PA_COURSE_START_DATE = @PA_COURSE_START_DATE,
			@PA_COURSE_END_DATE = @PA_COURSE_END_DATE,
			@PA_COURSE_ORG_ID = @PA_COURSE_ORG_ID,
			@PA_COURSE_COST_CODE = @PA_COURSE_COST_CODE,
			@PA_COURSE_REV_CODE = @PA_COURSE_REV_CODE
		------------------------------------


		DECLARE Course_Budget CURSOR local forward_only static FOR
		select distinct CBL_ID from dbo.Course_Budget_lines 
		where CBL_PROD_ID = @PA_COURSE_PRODUCT_ID and isnull(CBL_BOM_ID,'')='' and isnull(CBL_TXREF_ID,'')=''
		OPEN Course_Budget 
		FETCH Course_Budget INTO @CBL_ID		
		WHILE (@@fetch_status=0)
		BEGIN
			--create the manual budget lines
			exec spInsertUpdateEventBudgetLines
				@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
				@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
				@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
				@PA_EBL_COURSE_ID = @PA_COURSE_ID,
				@PA_EBL_CBL_ID = @CBL_ID,
				@PA_CALC_TOTAL = 1	
			if @OUTPUT_ERRORCODE <> 0
			BEGIN
				SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
				CLOSE Course_Budget
				DEALLOCATE Course_Budget
				IF @ERRORCODE != 0 GOTO HANDLE_ERROR
			END						
			FETCH Course_Budget INTO @CBL_ID
		END

		CLOSE Course_Budget
		DEALLOCATE Course_Budget			
	END

	------------ calculate course cost
	exec dbo.spCalculateCourseCost
	@PA_USER_LOGIN_ID = PA_USER_LOGIN_ID2,
	@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
	@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
	@PA_COURSE_ID = @PA_COURSE_ID
	if @OUTPUT_ERRORCODE <> 0
	BEGIN
		SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END	
	----------------------------------	
	
	-- copy over any delegate criteria
	insert into dbo.DELEGATE_CRITERIA
		(
		CDELCRITRL_ADD_DATE,
		CDELCRITRL_ADD_BY,
		CDELCRITRL_MOD_DATE,
		CDELCRITRL_MOD_BY,
		CDELCRITRL_RCV_DATE,
		CDELCRITRL_RCV_FROM,
		CDELCRITRL_CONDITION,
		CDELCRITRL_VALUE,
		CDELCRITRL_OPERAND,
		CDELCRITRL_ORDER,
		CDELCRITRL_PRE_BRACKET,
		CDELCRITRL_POST_BRACKET,
		CDELCRITRL_CDELCRITRF_ID,
		CDELCRITRL_COURSE_ID
		)
	select
		getdate() as CDELCRITRL_ADD_DATE,
		@PA_USER_LOGIN_ID2 as CDELCRITRL_ADD_BY,
		getdate() as CDELCRITRL_MOD_DATE,
		@PA_USER_LOGIN_ID2 as CDELCRITRL_MOD_BY,
		getdate() as CDELCRITRL_RCV_DATE,
		@PA_USER_LOGIN_ID as CDELCRITRL_RCV_FROM,
		CDELCRITRL_CONDITION,
		CDELCRITRL_VALUE,
		CDELCRITRL_OPERAND,
		CDELCRITRL_ORDER,
		CDELCRITRL_PRE_BRACKET,
		CDELCRITRL_POST_BRACKET,
		CDELCRITRL_CDELCRITRF_ID,
		@PA_COURSE_ID as CDELCRITRL_COURSE_ID
	from dbo.DELEGATE_CRITERIA
	where CDELCRITRL_PROD_ID = @PA_COURSE_PRODUCT_ID
	----------------------------------


	insert into dbo.Course_Characteristics
		(
		COCH_ADD_BY,
		COCH_ADD_DATE,
		COCH_MOD_BY,
		COCH_MOD_DATE,
		COCH_COURSE_ID,
		COCH_PRCH_ID,
		COCH_CHAR_ID,
		COCH_MATCH
		)
	select
		@PA_USER_LOGIN_ID,
		getdate(),
		@PA_USER_LOGIN_ID,
		getdate(),
		@PA_COURSE_ID,
		PRCH_PROD_ID,
		PRCH_CHAR_ID,
		PRCH_MATCH
	from dbo.Product_Characteristics
	where PRCH_PROD_ID = @PA_COURSE_PRODUCT_ID
	
	-- Transfer conversations
	insert into dbo.Conversation ( CNV_ADD_DATE, CNV_ADD_BY, CNV_MOD_DATE, CNV_MOD_BY, CNV_TABLE_NAME, CNV_RECORD_ID, CNV_CNVTMP_ID, CNV_NAME, CNV_TYPE, CNV_STATUS, CNV_TITLE, CNV_DESCRIPTION, CNV_IS_OPEN, CNV_IS_PUBLIC, CNV_CAN_REPLY, CNV_CAN_MULTI )
	select getDate(), @PA_USER_LOGIN_ID2, getDate(), @PA_USER_LOGIN_ID2, 'COURSE', @PA_COURSE_ID, CNV_CNVTMP_ID, CNV_NAME, CNV_TYPE, CNV_STATUS, CNV_TITLE, CNV_DESCRIPTION, CNV_IS_OPEN, CNV_IS_PUBLIC, CNV_CAN_REPLY, CNV_CAN_MULTI
	from dbo.Conversation
	where CNV_TABLE_NAME = 'product' and CNV_RECORD_ID = @PA_COURSE_PRODUCT_ID

	
END --Insert
/* commented out as this is just complete madness
--now remove any sessions that are not for the right location (for the prices that were created from not a session level)
delete from dbo.Session_Xref
from dbo.Session_Xref inner join prices on prs_id = sxref_prs_id
where SXREF_COURSE_ID = @PA_COURSE_ID
and prs_region not in ('',(select loc_region from location where loc_id = @PA_COURSE_LOC_ID))

--remove all region prices for course with no location set
if (select count(loc_region) from location where loc_id = @PA_COURSE_LOC_ID)=0 
begin
	delete from Session_Xref
	from Session_Xref inner join prices on sxref_prs_id = prs_id
	where SXREF_COURSE_ID = @PA_COURSE_ID
	and isnull(sxref_region,'') <>''
end

--now remove any sessions that are not for the right location (for the prices that were created from a session level only)
delete from Session_Xref
from Session_Xref 
where SXREF_COURSE_ID = @PA_COURSE_ID
and sxref_region not in ('',(select loc_region from location where loc_id = @PA_COURSE_LOC_ID))
*/

-- register the course against the new list
if datalength(isnull(@PA_LIST_ID,'')) > 0
BEGIN
	update dbo.LIST set
	LIST_MOD_DATE = GetDate(),
	LIST_MOD_BY = @PA_USER_LOGIN_ID2,
	LIST_COURSE_ID = @PA_COURSE_ID
	where LIST_ID = @PA_LIST_ID
END

--Sort out event based on event request details
if datalength(isnull(@PA_EV_REQUEST,'')) > 0
BEGIN
	exec spInsertCourse_EventRequest
		@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
		@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
		@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
		@PA_COURSE_ID = @PA_COURSE_ID,
		@PA_EV_REQUEST = @PA_EV_REQUEST
	if @OUTPUT_ERRORCODE <> 0
	BEGIN
		SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
		IF @ERRORCODE != 0 GOTO HANDLE_ERROR
	END

	update dbo.Activity set ACT_DONE_IT = 1, ACT_TYPE = 'd-Event Scheduled', ACT_SESSION_NAME = ACT_SESSION_NAME + '(complete)'
	from dbo.Activity
	join dbo.Act_Link_XRef on ACTLINK_ACT_ID = ACT_ID and ACTLINK_TABLE_NUM = 205
	join dbo.Event_Request on EVR_ID = ACTLINK_REC_ID
	where EVR_ID = @PA_EV_REQUEST and ACT_TYPE = 'd-Event to Schedule'
	update dbo.Activity set ACT_DONE_IT = 1, ACT_TYPE = 'd-Event Scheduled', ACT_SESSION_NAME = ACT_SESSION_NAME + '(complete)'
	from dbo.Activity
	join dbo.Act_Link_XRef on ACTLINK_ACT_ID = ACT_ID and ACTLINK_TABLE_NUM = 206
	join dbo.Event_Request_Xref on ERXREF_ID = ACTLINK_REC_ID
	join dbo.Event_Request on EVR_ID = ERXREF_EVR_ID
	where EVR_ID = @PA_EV_REQUEST and ACT_TYPE = 'd-Event to Schedule'
END

--Calculate the course numbers
exec spCalculateCourseNumbers
	@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
	@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
	@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
	@PA_COURSE_ID = @PA_COURSE_ID
if @OUTPUT_ERRORCODE <> 0
BEGIN
	SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
	IF @ERRORCODE != 0 GOTO HANDLE_ERROR
END

--Calculate the course start and end dates
exec spCalculateCourseStartEnd
	@PA_USER_LOGIN_ID = @PA_USER_LOGIN_ID,
	@PA_ERRORCODE = @OUTPUT_ERRORCODE OUTPUT,
	@PA_ERRORDESC = @OUTPUT_ERRORDESC OUTPUT,
	@PA_COURSE_ID = @PA_COURSE_ID
if @OUTPUT_ERRORCODE <> 0
BEGIN
	SELECT @ERRORCODE = @OUTPUT_ERRORCODE,@ROWCOUNT = 1,@ERRORDESC = @OUTPUT_ERRORDESC
	IF @ERRORCODE != 0 GOTO HANDLE_ERROR
END

If isnull(datalength(@PA_COURSE_BD_TOT_ACT_COST),0)>0 and @New=0
BEGIN
	update dbo.Course set COURSE_BD_TOT_ACT_COST = @PA_COURSE_BD_TOT_ACT_COST where COURSE_ID=@PA_COURSE_ID
END
If isnull(datalength(@PA_COURSE_BD_TOT_EST_COST),0)>0 and @New=0
BEGIN
	update dbo.Course set COURSE_BD_TOT_EST_COST = @PA_COURSE_BD_TOT_EST_COST where COURSE_ID=@PA_COURSE_ID
END

if @TRANCOUNT = 0
BEGIN
	COMMIT TRANSACTION
END

set @PA_ERRORCODE = 0
set @PA_RETURN_ID = @PA_COURSE_ID
Return

HANDLE_ERROR:
	if @TRANCOUNT = 0
	BEGIN
		ROLLBACK TRAN
	END
	set @PA_ERRORCODE = @ERRORCODE
	set @PA_ERRORDESC = @ERRORDESC
	Return


GO

   
   
